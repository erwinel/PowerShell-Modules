<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Erwine.Leonard.T.NetworkUtility</name>
    </assembly>
    <members>
        <member name="T:NetworkUtility.FormEncoder">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.FormEncoder.UrlEncodedItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Decode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Decode(System.IO.TextReader)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Decode(System.IO.Stream,System.Text.Encoding)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Decode(System.Net.WebResponse)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.IsUrlFormEncoded(System.Net.WebResponse)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Encode(System.String,System.String,System.IO.TextWriter,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Encode(System.Collections.Specialized.NameValueCollection,System.IO.TextWriter,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Encode(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Encode(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.FormEncoder.Encode(System.Collections.Specialized.NameValueCollection,System.Net.WebRequest,System.Boolean,System.Text.Encoding)">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.JsonArray">
            <summary>
            Represents an array of JSON-serializable values.
            </summary>
        </member>
        <member name="F:NetworkUtility.JsonArray.ElementName">
            <summary>
            Default name of element for serializing <see cref="T:NetworkUtility.JsonArray"/> objects.
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonArray.GetElementName">
            <summary>
            Gets the default name for serializing this <see cref="T:NetworkUtility.JsonArray"/> object.
            </summary>
            <returns>The default name for serializing this <see cref="T:NetworkUtility.JsonArray"/> object.</returns>
        </member>
        <member name="M:NetworkUtility.JsonArray.AsSerializedValue(System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Converts the current <see cref="T:NetworkUtility.JsonArray"/> object to objects which are ready for serialization.
            </summary>
            <param name="serializer">Serializer that will be used to serialize the data.</param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonArray.#ctor">
            <summary>
            Initializes a new, empty <see cref="T:NetworkUtility.JsonArray"/> object.
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonArray.#ctor(System.Collections.ArrayList)">
            <summary>
            Create a new <see cref="T:NetworkUtility.JsonArray"/> object from an array of values.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NetworkUtility.JsonArray.OnDeserialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Stores deserialized data.
            </summary>
            <param name="obj">Data being deserialized</param>
            <param name="serializer">Object which was used to deserialize data.</param>
        </member>
        <member name="P:NetworkUtility.JsonArray.Item(System.Int32)">
            <summary>
            Gets a <seealso cref="T:NetworkUtility.JsonValue"/> object at the specified collection index.
            </summary>
            <param name="index">Index from which to retrieve the <seealso cref="T:NetworkUtility.JsonValue"/>.</param>
            <returns><seealso cref="T:NetworkUtility.JsonValue"/> from the specified index.</returns>
        </member>
        <member name="M:NetworkUtility.JsonArray.IndexOf(NetworkUtility.JsonValue)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonArray.Insert(System.Int32,NetworkUtility.JsonValue)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:NetworkUtility.JsonArray.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:NetworkUtility.JsonArray.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonArray.Add(NetworkUtility.JsonValue)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NetworkUtility.JsonArray.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonArray.Contains(NetworkUtility.JsonValue)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonArray.CopyTo(NetworkUtility.JsonValue[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:NetworkUtility.JsonArray.Remove(NetworkUtility.JsonValue)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonArray.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkUtility.JsonConverter">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.JsonConverter.SupportedTypes">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="type"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:NetworkUtility.JsonDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.JsonDictionary.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.GetElementName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.AsSerializedValue(System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.GetKeys">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.JsonDictionary.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.JsonDictionary.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.JsonDictionary.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.Add(System.String,NetworkUtility.JsonValue)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.TryGetValue(System.String,NetworkUtility.JsonValue@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,NetworkUtility.JsonValue}[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:NetworkUtility.JsonDictionary.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkUtility.JsonText">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonText.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonText.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:NetworkUtility.JsonText.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonText.GetElementName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkUtility.JsonText.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonText.AsSerializedValue(System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonText.OnDeserialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:NetworkUtility.JsonValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.JsonValue.GetElementName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonValue.Serialize(System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.JsonValue.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:NetworkUtility.JsonValue.OnDeserialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:NetworkUtility.JsonValue.AsSerializedValue(System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:NetworkUtility.MediaType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.AttributeName_topLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.AttributeName_subType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.ElementName_mediaType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.ElementName_parameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.TopLevelType_Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.TopLevelType_Image">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.TopLevelType_Audio">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.TopLevelType_Video">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.TopLevelType_Application">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.TopLevelType_Multipart">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.TopLevelType_Message">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.SpecialCharsRegex">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.TokenRegex">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.LooseRegex">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.ContentTypeRegex">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaType.MediaTypeRegex">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.MediaType.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="mediaTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.TryParse(System.String,NetworkUtility.MediaType@)">
            <summary>
            
            </summary>
            <param name="mediaTypeString"></param>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.Validate(System.String)">
            <summary>
            
            </summary>
            <param name="mediaTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.ValidateToken(System.String)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="P:NetworkUtility.MediaType.TopLevelType">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaType.SubType">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaType.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.MediaType.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="mediaTypeString"></param>
        </member>
        <member name="M:NetworkUtility.MediaType.#ctor(System.Net.Mime.ContentType)">
            <summary>
            
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:NetworkUtility.MediaType.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="topLevelType"></param>
            <param name="subType"></param>
        </member>
        <member name="M:NetworkUtility.MediaType.#ctor(System.String,System.String,System.Collections.Specialized.StringDictionary)">
            <summary>
            
            </summary>
            <param name="topLevelType"></param>
            <param name="subType"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:NetworkUtility.MediaType.op_Implicit(System.String)~NetworkUtility.MediaType">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:NetworkUtility.MediaType.op_Equality(NetworkUtility.MediaType,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_Equality(NetworkUtility.MediaType,System.String)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_Equality(System.String,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_Inequality(NetworkUtility.MediaType,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_Inequality(NetworkUtility.MediaType,System.String)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_Inequality(System.String,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_LessThan(NetworkUtility.MediaType,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_LessThan(NetworkUtility.MediaType,System.String)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_LessThan(System.String,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_LessThanOrEqual(NetworkUtility.MediaType,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_LessThanOrEqual(NetworkUtility.MediaType,System.String)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_LessThanOrEqual(System.String,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_GreaterThan(NetworkUtility.MediaType,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_GreaterThan(NetworkUtility.MediaType,System.String)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_GreaterThan(System.String,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_GreaterThanOrEqual(NetworkUtility.MediaType,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_GreaterThanOrEqual(NetworkUtility.MediaType,System.String)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.op_GreaterThanOrEqual(System.String,NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.CompareTo(NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.CompareTo(NetworkUtility.MediaType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="caseSenstitive"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.CompareTo(NetworkUtility.MediaType,System.StringComparison)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.CompareTo(System.String)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.Equals(NetworkUtility.MediaType)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.Equals(System.String)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.ToContentType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MediaType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegFile.AttributeName_type">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegFile.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegFile.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegHide">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegHide.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistry.ElementName_hide">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistry.ElementName_record">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistry.Hide">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistry.Records">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegistryBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.XmlNamespace_Registry">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.AttributeName_id">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.ElementName_registry">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.ElementName_title">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.ElementName_xref">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.ElementName_note">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.TopLevelType_Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.TopLevelType_Image">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.TopLevelType_Audio">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.TopLevelType_Video">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.TopLevelType_Application">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.TopLevelType_Multipart">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryBase.TopLevelType_Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryBase.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryBase.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryBase.XRefs">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryBase.Notes">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegistryDB">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryDB.Registry_DefaultId">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryDB.ElementName_category">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryDB.ElementName_updated">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryDB.ElementName_registration_rule">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryDB.ElementName_expert">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegistryDB.ElementName_people">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryDB.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryDB.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryDB.Updated">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryDB.RegistrationRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryDB.Expert">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryDB.Registries">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegistryDB.People">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegName.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegName.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegNote">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegNote.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegPeople">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegPeople.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegRawXml">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegRawXml.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegRawXml.Content">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegRecord">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegRecord.AttributeName_date">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegRecord.ElementName_name">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegRecord.ElementName_file">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegRecord.Date">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegRecord.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegRecord.XRefs">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegRecord.File">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MediaTypeRegXRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegXRef.AttributeName_type">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MediaTypeRegXRef.AttributeName_data">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegXRef.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegXRef.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetworkUtility.MediaTypeRegXRef.Content">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetworkUtility.MimeUtility">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MimeUtility.MediaType_FormUrlEncoded">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetworkUtility.MimeUtility.UrlEncodedItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetworkUtility.MimeUtility.IsUrlFormEncoded(System.String)">
            <summary>
            
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MimeUtility.IsUrlFormEncoded(System.Net.WebResponse)">
            <summary>
            
            </summary>
            <param name="webResponse"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MimeUtility.GetEncoding(System.Net.Mime.ContentType,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="contentType"></param>
            <param name="defaultEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MimeUtility.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="contentType"></param>
            <param name="defaultEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MimeUtility.GetEncoding(System.Net.WebResponse,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="webResponse"></param>
            <param name="defaultEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MimeUtility.ContentTypeFromName(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkUtility.MimeUtility.ContentTypeFromData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:NetworkUtility.EventQueueManager">
            <summary>
            Allows raised events to be queued for redundant calls in thread-safe synchronized objects.
            </summary>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Get``5(``0,``1,``2,``3,System.Object,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Invokes a function, which may cause events to be raised, and returns the result.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="T3">Type of third argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="T4">Type of fourth argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="TResult">Type of value returned from <paramref name="func" />.</typeparam>
            <param name="arg1">Value of first argument to pass to <paramref name="func" />.</param>
            <param name="arg2">Value of second argument to pass to <paramref name="func" />.</param>
            <param name="arg3">Value of third argument to pass to <paramref name="func" />.</param>
            <param name="arg4">Value of fourth argument to pass to <paramref name="func" />.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="func" /> is being invoked.</param>
            <param name="func">Function to be invoked, which may result in events being raised.</param>
            <returns><typeparamref name="TResult" /> value returned from <paramref name="func" />.</returns>
            <remarks>While <paramref name="func" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="func" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Invoke``4(``0,``1,``2,``3,System.Object,System.Action{``0,``1,``2,``3})">
            <summary>
            Invokes a method which may cause events to be raised.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="method" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="method" />.</typeparam>
            <typeparam name="T3">Type of third argument to pass to <paramref name="method" />.</typeparam>
            <typeparam name="T4">Type of fourth argument to pass to <paramref name="method" />.</typeparam>
            <param name="arg1">Value of first argument to pass to <paramref name="method" />.</param>
            <param name="arg2">Value of second argument to pass to <paramref name="method" />.</param>
            <param name="arg3">Value of third argument to pass to <paramref name="method" />.</param>
            <param name="arg4">Value of fourth argument to pass to <paramref name="method" />.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="method" /> is being invoked.</param>
            <param name="method">Method to be invoked, which may result in events being raised.</param>
            <remarks>While <paramref name="method" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="method" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Get``4(``0,``1,``2,System.Object,System.Func{``0,``1,``2,``3})">
            <summary>
            Invokes a function, which may cause events to be raised, and returns the result.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="T3">Type of third argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="TResult">Type of value returned from <paramref name="func" />.</typeparam>
            <param name="arg1">Value of first argument to pass to <paramref name="func" />.</param>
            <param name="arg2">Value of second argument to pass to <paramref name="func" />.</param>
            <param name="arg3">Value of third argument to pass to <paramref name="func" />.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="func" /> is being invoked.</param>
            <param name="func">Function to be invoked, which may result in events being raised.</param>
            <returns><typeparamref name="TResult" /> value returned from <paramref name="func" />.</returns>
            <remarks>While <paramref name="func" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="func" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Invoke``3(``0,``1,``2,System.Object,System.Action{``0,``1,``2})">
            <summary>
            Invokes a method which may cause events to be raised.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="method" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="method" />.</typeparam>
            <typeparam name="T3">Type of third argument to pass to <paramref name="method" />.</typeparam>
            <param name="arg1">Value of first argument to pass to <paramref name="method" />.</param>
            <param name="arg2">Value of second argument to pass to <paramref name="method" />.</param>
            <param name="arg3">Value of third argument to pass to <paramref name="method" />.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="method" /> is being invoked.</param>
            <param name="method">Method to be invoked, which may result in events being raised.</param>
            <remarks>While <paramref name="method" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="method" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Get``3(``0,``1,System.Object,System.Func{``0,``1,``2})">
            <summary>
            Invokes a function, which may cause events to be raised, and returns the result.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="TResult">Type of value returned from <paramref name="func" />.</typeparam>
            <param name="arg1">Value of first argument to pass to <paramref name="func" />.</param>
            <param name="arg2">Value of second argument to pass to <paramref name="func" />.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="func" /> is being invoked.</param>
            <param name="func">Function to be invoked, which may result in events being raised.</param>
            <returns><typeparamref name="TResult" /> value returned from <paramref name="func" />.</returns>
            <remarks>While <paramref name="func" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="func" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Invoke``2(``0,``1,System.Object,System.Action{``0,``1})">
            <summary>
            Invokes a method which may cause events to be raised.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="method" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="method" />.</typeparam>
            <param name="arg1">Value of first argument to pass to <paramref name="method" />.</param>
            <param name="arg2">Value of second argument to pass to <paramref name="method" />.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="method" /> is being invoked.</param>
            <param name="method">Method to be invoked, which may result in events being raised.</param>
            <remarks>While <paramref name="method" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="method" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Get``2(``0,System.Object,System.Func{``0,``1})">
            <summary>
            Invokes a function, which may cause events to be raised, and returns the result.
            </summary>
            <typeparam name="T">Type of argument to pass to <paramref name="func" />.</typeparam>
            <typeparam name="TResult">Type of value returned from <paramref name="func" />.</typeparam>
            <param name="arg">Value of argument to pass to <paramref name="func" />.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="func" /> is being invoked.</param>
            <param name="func">Function to be invoked, which may result in events being raised.</param>
            <returns><typeparamref name="TResult" /> value returned from <paramref name="func" />.</returns>
            <remarks>While <paramref name="func" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="func" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Invoke``1(``0,System.Object,System.Action{``0})">
            <summary>
            Invokes a method which may cause events to be raised.
            </summary>
            <typeparam name="T">Type of argument to pass to <paramref name="method" />.</typeparam>
            <param name="arg">Value of argument to pass to <paramref name="method" />.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="method" /> is being invoked.</param>
            <param name="method">Method to be invoked, which may result in events being raised.</param>
            <remarks>While <paramref name="method" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="method" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Get``1(System.Object,System.Func{``0})">
            <summary>
            Invokes a function, which may cause events to be raised, and returns the result.
            </summary>
            <typeparam name="TResult">Type of value returned from <paramref name="func" />.</typeparam>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="func" /> is being invoked.</param>
            <param name="func">Function to be invoked, which may result in events being raised.</param>
            <returns><typeparamref name="TResult" /> value returned from <paramref name="func" />.</returns>
            <remarks>While <paramref name="func" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="func" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Invoke(System.Object,System.Action)">
            <summary>
            Invokes a method which may cause events to be raised.
            </summary>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="method" /> is being invoked.</param>
            <param name="method">Method to be invoked, which may result in events being raised.</param>
            <remarks>While <paramref name="method" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="method" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.InvokeGet(System.Delegate,System.Object,System.Object[])">
            <summary>
            Invokes a method which may cause events to be raised.
            </summary>
            <param name="method">Method to be invoked, which may result in events being raised.</param>
            <param name="syncRoot">The object on which to acquire an exclusive lock while <paramref name="method" /> is being invoked.</param>
            <param name="args">Arguments to pass to <paramref name="method" />.</param>
            <returns>Value returned from <paramref name="method" />.</returns>
            <remarks>While <paramref name="method" /> is being invoked, any calls to the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Raise</code>
            will result in the event handler being queued for invocation until the call to <paramref name="method" /> is finished.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``4(``0,``1,``2,``3,System.Action{``0,``1,``2,``3},System.Action{System.Exception,``0,``1,``2,``3})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T3">Type of third argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T4">Type of fourth argument to pass to <paramref name="handler" />.</typeparam>
            <param name="arg1">Value of first event argument to pass to <paramref name="handler" />.</param>
            <param name="arg2">Value of second event argument to pass to <paramref name="handler" />.</param>
            <param name="arg3">Value of third event argument to pass to <paramref name="handler" />.</param>
            <param name="arg4">Value of fourth event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <param name="onException">Method which gets invoked when <paramref name="handler" /> throws an exception.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``3(``0,``1,``2,System.Action{``0,``1,``2},System.Action{System.Exception,``0,``1,``2})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T3">Type of third argument to pass to <paramref name="handler" />.</typeparam>
            <param name="arg1">Value of first event argument to pass to <paramref name="handler" />.</param>
            <param name="arg2">Value of second event argument to pass to <paramref name="handler" />.</param>
            <param name="arg3">Value of third event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <param name="onException">Method which gets invoked when <paramref name="handler" /> throws an exception.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``4(``0,``1,``2,``3,System.Action{``0,``1,``2,``3})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T3">Type of third argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T4">Type of fourth argument to pass to <paramref name="handler" />.</typeparam>
            <param name="arg1">Value of first event argument to pass to <paramref name="handler" />.</param>
            <param name="arg2">Value of second event argument to pass to <paramref name="handler" />.</param>
            <param name="arg3">Value of third event argument to pass to <paramref name="handler" />.</param>
            <param name="arg4">Value of fourth event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``2(``0,``1,System.Action{``0,``1},System.Action{System.Exception,``0,``1})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="handler" />.</typeparam>
            <param name="arg1">Value of first event argument to pass to <paramref name="handler" />.</param>
            <param name="arg2">Value of second event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <param name="onException">Method which gets invoked when <paramref name="handler" /> throws an exception.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``1(System.Object,``0,System.Action{System.Object,``0},System.Action{System.Exception,System.Object,``0})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T">Type of argument to pass to <paramref name="handler" />.</typeparam>
            <param name="sender">Object which raised the event.</param>
            <param name="eventArgs">Value of event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <param name="onException">Method which gets invoked when <paramref name="handler" /> throws an exception.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``3(``0,``1,``2,System.Action{``0,``1,``2})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T3">Type of third argument to pass to <paramref name="handler" />.</typeparam>
            <param name="arg1">Value of first event argument to pass to <paramref name="handler" />.</param>
            <param name="arg2">Value of second event argument to pass to <paramref name="handler" />.</param>
            <param name="arg3">Value of third event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``1(``0,System.Action{``0},System.Action{System.Exception,``0})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T">Type of argument to pass to <paramref name="handler" />.</typeparam>
            <param name="arg">Value of event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <param name="onException">Method which gets invoked when <paramref name="handler" /> throws an exception.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise(System.Action,System.Action{System.Exception})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <param name="onException">Method which gets invoked when <paramref name="handler" /> throws an exception.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T1">Type of first argument to pass to <paramref name="handler" />.</typeparam>
            <typeparam name="T2">Type of second argument to pass to <paramref name="handler" />.</typeparam>
            <param name="arg1">Value of first event argument to pass to <paramref name="handler" />.</param>
            <param name="arg2">Value of second event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``1(System.Object,``0,System.Action{System.Object,``0})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T">Type of argument to pass to <paramref name="handler" />.</typeparam>
            <param name="sender">Object which raised the event.</param>
            <param name="eventArgs">Value of event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise``1(``0,System.Action{``0})">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <typeparam name="T">Type of argument to pass to <paramref name="handler" />.</typeparam>
            <param name="arg">Value of event argument to pass to <paramref name="handler" />.</param>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.Raise(System.Action)">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
        <member name="M:NetworkUtility.EventQueueManager.RaiseHandler(System.Delegate,System.Action{System.Exception,System.Object[]},System.Object[])">
            <summary>
            Queues a method invocation to handle an event.
            </summary>
            <param name="handler">Method which gets invoked to handle the event.</param>
            <param name="onException">Method which gets invoked when <paramref name="handler" /> throws an exception.</param>
            <param name="args">Event arguments to pass to <paramref name="handler" />.</param>
            <returns><code>true</code> if <paramref name="handler" /> was immediately invoked or <code>false</code>
            if <paramref name="handler" /> was queued for later execution.</returns>
            <remarks>If none of the <see cref="T:NetworkUtility.EventQueueManager" /> <code>Get</code> or <code>Invoke</code> methods are invoking their
            respective delegates, then <paramref name="handler" /> will be invoked immediately. Otherwise, it will be queued for invocation
            after the <code>Get</code> or <code>Invoke</code> method has finished executing the delegate.</remarks>
        </member>
    </members>
</doc>
