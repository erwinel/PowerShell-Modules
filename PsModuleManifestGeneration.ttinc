<#@ include file="Common.ttinc" #><#+
 /* The following namespace is required:
 *     System.Xml.Serialization
 */

public ModuleConfigInfo ModuleConfig
{
	get
	{
		if (_moduleConfig == null)
		{
			string path = Path.Combine(TemplateFolder, "ModuleConfig.xml");
			if (File.Exists(path))
			{
				XmlSerializer serializer = new XmlSerializer(typeof(ModuleConfigInfo));
				using (XmlReader xmlReader = XmlReader.Create(path))
					_moduleConfig = (ModuleConfigInfo)(serializer.Deserialize(xmlReader));
			}
			else
				_moduleConfig = new ModuleConfigInfo();
		}

		return _moduleConfig;
	}
}

private ModuleConfigInfo _moduleConfig = null;

void EmitCommentLines(StringBuilder generationEnvironment, string text)
{
	if (text == null)
		return;

	foreach (string line in System.Text.RegularExpressions.Regex.Split(text, @"\r\n?|\n"))
	{
		generationEnvironment.Append("# ");
		generationEnvironment.AppendLine(line);
	}
}

void EmitManifestValueString(StringBuilder generationEnvironment, string text)
{
	if (text == null)
	{
		generationEnvironment.Append("''");
		return;
	}

	if (text.Contains("\r") || text.Contains("\n"))
	{
		generationEnvironment.AppendLine("@'");
		generationEnvironment.AppendLine(text);
		generationEnvironment.Append("'@");
	}
	else
	{
		generationEnvironment.Append("'");
		generationEnvironment.Append(text.Replace("'", "''"));
		generationEnvironment.Append("'");
	}
}

void EmitPsManifestRootModule(StringBuilder generationEnvironment, string comment = "Script module or binary module file associated with this manifest.")
{
	EmitCommentLines(generationEnvironment, comment);
	generationEnvironment.Append("RootModule = ");
	EmitManifestValueString(generationEnvironment, ProjectInfo.OutputFileName);
	generationEnvironment.AppendLine();
}

void EmitPsManifestVersion(StringBuilder generationEnvironment, string comment = "Version number of this module.")
{
	EmitCommentLines(generationEnvironment, comment);
	if (ProjectInfo.AssemblyFileVersion == null)
		generationEnvironment.AppendLine("ModuleVersion = '0.1'");
	else
	{
		generationEnvironment.Append("ModuleVersion = ");
		EmitManifestValueString(generationEnvironment, ProjectInfo.AssemblyFileVersion.ToString());
		generationEnvironment.AppendLine();
	}
}

void EmitPsManifestGUID(StringBuilder generationEnvironment, string comment = "ID used to uniquely identify this module.")
{
	EmitCommentLines(generationEnvironment, comment);
	if (ProjectInfo.AssemblyGuid.HasValue)
	{
		generationEnvironment.Append("GUID = ");
		EmitManifestValueString(generationEnvironment, ProjectInfo.AssemblyGuid.Value.ToString("d"));
		generationEnvironment.AppendLine();
	}
	else
	{
		generationEnvironment.AppendLine(@"# WARNING! You must define the GUID on the output assembly.");
		generationEnvironment.AppendLine("# GUID = '00000000-0000-0000-0000-000000000000'");
	}
}

void EmitPsManifestAuthor(StringBuilder generationEnvironment, string comment = "Author of this module.")
{
	EmitCommentLines(generationEnvironment, comment);
	generationEnvironment.Append("Author = ");
	EmitManifestValueString(generationEnvironment, (String.IsNullOrEmpty(ModuleConfig.Author)) ? "Unknown" : ModuleConfig.Author);
	generationEnvironment.AppendLine();
}

void EmitPsManifestDescription(StringBuilder generationEnvironment, string comment = "Description of the functionality provided by this module.")
{
	EmitCommentLines(generationEnvironment, comment);
	if (ProjectInfo.Description != null)
		generationEnvironment.AppendLine("# Description = ''");
	else
	{
		generationEnvironment.Append("Description = ");
		EmitManifestValueString(generationEnvironment, ProjectInfo.AssemblyGuid.Description);
		generationEnvironment.AppendLine();
	}
}

void EmitPsManifestPowerShellVersion(StringBuilder generationEnvironment, string comment = "Minimum version of the Windows PowerShell engine required by this module.")
{
	EmitCommentLines(generationEnvironment, comment);
	if (ProjectInfo.Description != null)
		generationEnvironment.AppendLine("# Description = ''");
	else
	{
		generationEnvironment.Append("Description = ");
		EmitManifestValueString(generationEnvironment, ProjectInfo.AssemblyGuid.Description);
		generationEnvironment.AppendLine();
	}
}

[Serializable]
[XmlRoot("ModuleConfig")]
public class ModuleConfigInfo
{
	[XmlAttribute]
	public string Author { get; set; }

	[XmlAttribute]
	public string PowerShellVersion { get; set; }

	[XmlAttribute]
	public string PowerShellHostName { get; set; }

	[XmlAttribute]
	public string PowerShellHostVersion { get; set; }

	[XmlAttribute]
	public string DotNetFrameworkVersion { get; set; }

	[XmlAttribute]
	public string CLRVersion { get; set; }

	[XmlAttribute]
	public string ProcessorArchitecture { get; set; }
}

/*

# Minimum version of the Windows PowerShell engine required by this module
# PowerShellVersion = ''

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module
FunctionsToExport = '*'

# Cmdlets to export from this module
CmdletsToExport = '*'

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module
AliasesToExport = '*'

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess
# PrivateData = ''

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''
*/
#>