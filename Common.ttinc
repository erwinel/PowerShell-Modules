<#+
/* Following assemblies are required:
 *     System.Core
 *     System.Xml
 *     EnvDTE
 *     System.Management.Automation
 * The following namespaces are required:
 *     System
 *     System.Collections.Generic
 *     System.IO
 *     System.Linq
 *     System.Management.Automation
 *     System.Management.Automation.Runspaces
 *     System.Text
 *     System.Xml
 *     Microsoft.VisualStudio.TextTemplating
 */
string TemplateFolder
{
	get
	{
		if (_templateFolder == null)
			_templateFolder = Path.GetDirectoryName(Host.TemplateFile);
		return _templateFolder;
	}
}
string DefaultNamespace
{
	get
	{
		if (_defaultNamespace != null)
			return _defaultNamespace;
		_defaultNamespace = GetCurrentItemPropertyString("CustomToolNamespace");
		if (!String.IsNullOrEmpty(_defaultNamespace))
			return _defaultNamespace;
		try
		{
			_defaultNamespace = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString();
			if (!String.IsNullOrEmpty(_defaultNamespace))
				return _defaultNamespace;
		}
		catch { }
		_defaultNamespace = GetCurrentItemPropertyString("RootNamespace");
		if (String.IsNullOrEmpty(_defaultNamespace))
			_defaultNamespace = (String.IsNullOrEmpty(_projectInfo.DefaultNamespace)) ? _projectInfo.RootNamespace ?? "" : _projectInfo.DefaultNamespace;
		return _defaultNamespace;
	}
}
EnvDTE.DTE DTE
{
	get
	{
		if (_dte == null)
			_dte = (EnvDTE.DTE)((Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)));
		return _dte;
	}
}
EnvDTE.Solution Solution
{
	get
	{
		if (_solution == null)
			_solution = DTE.Solution;
		return _solution;
	}
}
EnvDTE.ProjectItem TemplateItem
{
	get
	{
		if (_templateItem == null)
			_templateItem = Solution.FindProjectItem(Host.TemplateFile);
		return _templateItem;
	}
}
EnvDTE.Project CurrentProject
{
	get
	{
		if (_currentProject == null)
			_currentProject = TemplateItem.ContainingProject;
		return _currentProject;
	}
}
ProjectInfoObject ProjectInfo
{
	get
	{
		if (_projectInfo == null)
			_projectInfo = new ProjectInfoObject(CurrentProject);
		return _projectInfo;
	}
}
string CustomToolOutput { get { return GetCurrentItemPropertyString("CustomToolOutput"); } }
string ActiveConfig { get { return GetPropertyString(Solution.Properties, "ActiveConfig"); } }
IEnumerable<FileInfo> GetProjectItemFiles(EnvDTE.ProjectItem pi)
{
	for (int i = 0; i < pi.FileCount; i++)
		yield return new System.IO.FileInfo(pi.FileNames[(short)(i + 1)]);
}
IEnumerable<FileInfo> GetProjectFiles(Func<EnvDTE.ProjectItem, System.IO.FileInfo, bool> predicate = null)
{
	IEnumerable<EnvDTE.ProjectItem> items = CurrentProject.ProjectItems.OfType<EnvDTE.ProjectItem>().Where(pi => ProjectInfo.FileKind.Equals(new Guid(pi.Kind)));

	if (predicate == null)
		return items.SelectMany(pi => GetProjectItemFiles(pi));
		
	return items.SelectMany(pi => GetProjectItemFiles(pi).Where(fi => predicate(pi, fi)));
}
IEnumerable<FileInfo> GetCodeProjectFiles() { return GetProjectFiles((EnvDTE.ProjectItem pi, System.IO.FileInfo fi) => pi.FileCodeModel != null); }
IEnumerable<FileInfo> GetNonCodeProjectFiles() { return GetProjectFiles((EnvDTE.ProjectItem pi, System.IO.FileInfo fi) => pi.FileCodeModel == null); }
class ProjectInfoObject
{
	internal string Title { get { return GetProjectPropertyString("Title", ""); } }
	internal string Product { get { return GetProjectPropertyString("Product", ""); } }
	internal string Name { get { return _project.Name; } }
	internal string Description { get { return GetProjectPropertyString("Description", ""); } }
	internal string Copyright { get { return GetProjectPropertyString("Copyright", ""); } }
	internal string Company { get { return GetProjectPropertyString("Company", ""); } }

	internal string RootNamespace { get { return GetProjectPropertyString("RootNamespace", ""); } }
	internal Version AssemblyVersion { get { return GetProjectPropertyVersion("AssemblyVersion"); } }
	internal string FileName { get { return GetProjectPropertyString("FileName", ""); } }
	internal string ApplicationIcon { get { return GetProjectPropertyString("ApplicationIcon", ""); } }
	internal string OutputFileName { get { return GetProjectPropertyString("OutputFileName", ""); } }
	internal Guid? AssemblyGuid { get { return GetProjectPropertyGuid("AssemblyGuid"); } }
	internal string FullPath { get { return GetProjectPropertyString("FullPath", ""); } }
	internal Version AssemblyFileVersion { get { return GetProjectPropertyVersion("AssemblyFileVersion"); } }
	internal string AssemblyName { get { return GetProjectPropertyString("AssemblyName", ""); } }
	internal string LocalPath { get { return GetProjectPropertyString("LocalPath", ""); } }
	internal string DefaultNamespace { get { return GetProjectPropertyString("DefaultNamespace", ""); } }

	internal string FullName { get { return _project.FullName; } }
	internal string SolutionName { get { return GetProjectPropertyString("SolutionName", ""); } }
	internal string TargetFileName { get { return GetProjectPropertyString("TargetFileName", ""); } }
	internal string TargetFrameworkName { get { return (TargetFrameworkMoniker.Keys[0] == null) ? TargetFrameworkMoniker.Keys[0] : ""; } }
	internal Version TargetFrameworkVersion
	{
		get
		{
			Version v;
			if (!String.IsNullOrEmpty(TargetFrameworkMoniker["Version"]) && Version.TryParse((TargetFrameworkMoniker["Version"].StartsWith("v")) ? TargetFrameworkMoniker["Version"].Substring(1) : TargetFrameworkMoniker["Version"], out v))
				return v;

			return null;
		}
	}
	internal Guid FileKind
	{
		get
		{
			Guid g;
			if (Guid.TryParse(EnvDTE.Constants.vsProjectItemKindPhysicalFile, out g))
				return g;
			throw new Exception(String.Format("\"{0}\" (from EnvDTE.Constants.vsProjectItemKindPhysicalFile) is not a valid Guid.", EnvDTE.Constants.vsProjectItemKindPhysicalFile));
		}
	}
	internal System.Collections.Specialized.NameValueCollection TargetFrameworkMoniker
	{
		get
		{
			if (_targetFrameworkMoniker == null)
			{
				_targetFrameworkMoniker = new System.Collections.Specialized.NameValueCollection();
				System.Text.RegularExpressions.Regex keyValueRegex = new System.Text.RegularExpressions.Regex(@"(^|,)(?<k>[^=,]*)(=(?<v>[^,]*))?");
				string s = GetProjectPropertyString("TargetFrameworkMoniker") ?? "";
				foreach (System.Text.RegularExpressions.Match m in keyValueRegex.Matches(s.Trim()))
				{
					if (m.Groups["v"].Success)
						_targetFrameworkMoniker.Add(m.Groups["k"].Value, m.Groups["v"].Value);
					else
						_targetFrameworkMoniker.Add(m.Groups["v"].Value, null);
				}
			}

			return _targetFrameworkMoniker;
		}
	}
	private EnvDTE.Project _project;
	private System.Collections.Specialized.NameValueCollection _targetFrameworkMoniker = null;

	internal ProjectInfoObject(EnvDTE.Project project)
	{
		_project = project;
	}
	internal T GetProjectProperty<T>(string key, T defaultValue = default(T))
	{
		return GetProperty<T>(_project.Properties, key, defaultValue);
	}
	internal string GetProjectPropertyString(string key, string defaultValue = null)
	{
		return GetPropertyString(_project.Properties, key, defaultValue);
	}
	internal Version GetProjectPropertyVersion(string key, Version defaultValue = null)
	{
		return GetPropertyVersion(_project.Properties, key, defaultValue);
	}
	internal Guid? GetProjectPropertyGuid(string key, Guid? defaultValue = null)
	{
		return GetPropertyGuid(_project.Properties, key, defaultValue);
	}
}

private static string _templateFolder = null;
private static EnvDTE.DTE _dte = null;
private static EnvDTE.Solution _solution = null;
private static EnvDTE.ProjectItem _templateItem = null;
private static EnvDTE.Project _currentProject = null;
private static ProjectInfoObject _projectInfo = null;
private static string _defaultNamespace = null;
internal static T GetProperty<T>(EnvDTE.Properties properties, string key, T defaultValue = default(T))
{
	try { return (T)(properties.Item(key).Value); }
	catch { return defaultValue; }
}
internal static Version GetPropertyVersion(EnvDTE.Properties properties, string key, Version defaultValue = null)
{
	string s = GetProperty<string>(properties, key);
	Version v;
	if (String.IsNullOrEmpty(s) || !Version.TryParse(s.Trim(), out v))
		return null;

	if (v.Revision != 0)
		return v;

	if (v.Build == 0)
		return new Version(v.Major, v.Minor);

	return new Version(v.Major, v.Minor, v.Build);
}
internal static Guid? GetPropertyGuid(EnvDTE.Properties properties, string key, Guid? defaultValue = null)
{
	string s = GetProperty<string>(properties, key);
	Guid g;
	if (String.IsNullOrEmpty(s) || !Guid.TryParse(s.Trim(), out g))
		return null;

	return g;
}
internal static string GetPropertyString(EnvDTE.Properties properties, string key, string defaultValue = null)
{
	string s = GetProperty<string>(properties, key);
	if (defaultValue == null || !String.IsNullOrEmpty(s))
		return s;
	return defaultValue;
}
T GetCurrentItemProperty<T>(string key, T defaultValue = default(T))
{
	return GetProperty<T>(TemplateItem.Properties, key, defaultValue);
}
string GetCurrentItemPropertyString(string key, string defaultValue = null)
{
	return GetPropertyString(TemplateItem.Properties, key, defaultValue);
}
Version GetCurrentItemPropertyVersion(string key, Version defaultValue = null)
{
	return GetPropertyVersion(TemplateItem.Properties, key, defaultValue);
}
Guid? GetCurrentItemPropertyGuid(string key, Guid? defaultValue = null)
{
	return GetPropertyGuid(TemplateItem.Properties, key, defaultValue);
}
#>