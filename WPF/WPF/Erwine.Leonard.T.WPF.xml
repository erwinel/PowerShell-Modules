<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Erwine.Leonard.T.WPF</name>
    </assembly>
    <members>
        <member name="T:WpfCLR.ActionDelegationContext">
            <summary>
            PowerShell script delegation for delegates that do not return a value and take no parameters.
            </summary>
        </member>
        <member name="T:WpfCLR.ActionDelegationContext.ActionDelegate">
            <summary>
            Defines delegate handler supported by <see cref="T:WpfCLR.ActionDelegationContext"/>.
            </summary>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext.Handler">
            <summary>
            Handler method for delegate.
            </summary>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:WpfCLR.ActionDelegationContext.ActionDelegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
        </member>
        <member name="T:WpfCLR.ActionDelegationContext`1">
            <summary>
            PowerShell script delegation for delegates that do not return a value and takes 1 parameter.
            </summary>
            <typeparam name="T">Type of parameter passed to the supported delegate.</typeparam>
        </member>
        <member name="T:WpfCLR.ActionDelegationContext`1.ActionDelegate">
            <summary>
            Defines delegate handler supported by <see cref="T:WpfCLR.ActionDelegationContext`1"/>.
            </summary>
            <param name="arg">Argument to pass to <see cref="M:WpfCLR.ActionDelegationContext`1.Handler(`0)"/></param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`1.Handler(`0)">
            <summary>
            Handler method for delegate.
            </summary>
            <param name="arg">Argument to pass to the inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`1.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:WpfCLR.ActionDelegationContext`1.ActionDelegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`1.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`1"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`1.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`1"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`1.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`1"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`1.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`1"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
        </member>
        <member name="T:WpfCLR.ActionDelegationContext`2">
            <summary>
            PowerShell script delegation for delegates that do not return a value and takes 2 parameters.
            </summary>
            <typeparam name="TArg1">Type of first parameter passed to the supported delegate.</typeparam>
            <typeparam name="TArg2">Type of second parameter passed to the supported delegate.</typeparam>
        </member>
        <member name="T:WpfCLR.ActionDelegationContext`2.ActionDelegate">
            <summary>
            Defines delegate handler supported by <see cref="T:WpfCLR.ActionDelegationContext`2"/>.
            </summary>
            <param name="arg1">First argument to pass to <see cref="M:WpfCLR.ActionDelegationContext`2.Handler(`0,`1)"/>.</param>
            <param name="arg2">Second argument to pass to <see cref="M:WpfCLR.ActionDelegationContext`2.Handler(`0,`1)"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`2.Handler(`0,`1)">
            <summary>
            Handler method for delegate.
            </summary>
            <param name="arg1">First argument to pass to the inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <param name="arg2">Second argument to pass to the inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`2.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:WpfCLR.ActionDelegationContext`2.ActionDelegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`2.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`2"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`2.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`2"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`2.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`2"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`2.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`2"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
        </member>
        <member name="T:WpfCLR.ActionDelegationContext`3">
            <summary>
            PowerShell script delegation for delegates that do not return a value and takes 2 parameters.
            </summary>
            <typeparam name="TArg1">Type of first parameter passed to the supported delegate.</typeparam>
            <typeparam name="TArg2">Type of second parameter passed to the supported delegate.</typeparam>
            <typeparam name="TArg3">Type of third parameter passed to the supported delegate.</typeparam>
        </member>
        <member name="T:WpfCLR.ActionDelegationContext`3.ActionDelegate">
            <summary>
            Defines delegate handler supported by <see cref="T:WpfCLR.ActionDelegationContext`3"/>.
            </summary>
            <param name="arg1">First argument to pass to <see cref="M:WpfCLR.ActionDelegationContext`3.Handler(`0,`1,`2)"/>.</param>
            <param name="arg2">Second argument to pass to <see cref="M:WpfCLR.ActionDelegationContext`3.Handler(`0,`1,`2)"/>.</param>
            <param name="arg3">Third argument to pass to <see cref="M:WpfCLR.ActionDelegationContext`3.Handler(`0,`1,`2)"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`3.Handler(`0,`1,`2)">
            <summary>
            Handler method for delegate.
            </summary>
            <param name="arg1">First argument to pass to the inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <param name="arg2">Second argument to pass to the inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <param name="arg3">Third argument to pass to the inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`3.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:WpfCLR.ActionDelegationContext`3.ActionDelegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`3.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`3"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`3.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`3"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`3.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`3"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.ActionDelegationContext`3.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.ActionDelegationContext`3"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
        </member>
        <member name="T:WpfCLR.DelegateInvokedEventArgs">
            <summary>
            Arguments which contain output from <seealso cref="T:System.Management.Automation.ScriptBlock"/> invoked as a delegate.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegateInvokedEventArgs.Output">
            <summary>
            Output return from invoking delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/>.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegateInvokedEventArgs.ErrorRecords">
            <summary>
            Error records produced from invoking delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/>.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegateInvokedEventArgs.WarningRecords">
            <summary>
            Warning records produced from invoking delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/>.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegateInvokedEventArgs.VerboseRecords">
            <summary>
            Verbose records produced from invoking delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/>.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegateInvokedEventArgs.DebugRecords">
            <summary>
            Debug records produced from invoking delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/>.
            </summary>
        </member>
        <member name="M:WpfCLR.DelegateInvokedEventArgs.#ctor(System.Management.Automation.PSDataStreams)">
            <summary>
            Initializes new <see cref="T:WpfCLR.DelegateInvokedEventArgs"/> object.
            </summary>
            <param name="dataStreams">Data streams from <seealso cref="T:System.Management.Automation.PowerShell"/> object that invoked the delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
        </member>
        <member name="M:WpfCLR.DelegateInvokedEventArgs.#ctor">
            <summary>
            Initializes empty <see cref="T:WpfCLR.DelegateInvokedEventArgs"/> object.
            </summary>
        </member>
        <member name="M:WpfCLR.DelegateInvokedEventArgs.AppendOutput(System.Collections.Generic.IEnumerable{System.Management.Automation.PSObject})">
            <summary>
            Append objects to the <see cref="P:WpfCLR.DelegateInvokedEventArgs.Output"/> collection.
            </summary>
            <param name="collection">Items to append.</param>
        </member>
        <member name="T:WpfCLR.DelegationContext">
            <summary>
            Base class for PowerShell script delegation.
            </summary>
        </member>
        <member name="E:WpfCLR.DelegationContext.DelegateInvoked">
            <summary>
            Occurs when the associated delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/> is invoked.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegationContext.AttachedEvents">
            <summary>
            List of attached event delegates.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegationContext.ApartmentState">
            <summary>
            Apartment state to use when invoking the delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/>.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegationContext.ThreadOptions">
            <summary>
            Thread options to use when invoking the delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/>.
            </summary>
        </member>
        <member name="P:WpfCLR.DelegationContext.ThisObject">
            <summary>
            Object which becomes the &quot;$this&quot; variable when the delegate <seealso cref="T:System.Management.Automation.ScriptBlock"/> is invoked.
            </summary>
        </member>
        <member name="M:WpfCLR.DelegationContext.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.DelegationContext"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.DelegationContext.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.DelegationContext"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.DelegationContext.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.DelegationContext"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.DelegationContext.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.DelegationContext"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
        </member>
        <member name="M:WpfCLR.DelegationContext.RaiseDelegateInvoked(WpfCLR.DelegateInvokedEventArgs)">
            <summary>
            Raises the <see cref="E:WpfCLR.DelegationContext.DelegateInvoked"/> event.
            </summary>
            <param name="args">Arguments containing results of the <see cref="T:System.Management.Automation.ScriptBlock"/> that was invoked as a delegate.</param>
        </member>
        <member name="M:WpfCLR.DelegationContext.AttachInstanceEvent(System.Object,System.String)">
            <summary>
            Attaches a object instance event.
            </summary>
            <param name="eventSource">Object which is the source of the event.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:WpfCLR.DelegationContext.AttachStaticEvent(System.Type,System.String)">
            <summary>
            Attaches a static event.
            </summary>
            <param name="sourceType">Type of object which is the source of the event.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:WpfCLR.DelegationContext.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:System.Delegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.InvokeScriptBlock(System.Object[])">
            <summary>
            Invokes the script block.
            </summary>
            <param name="args">Arguments to pass to the scriptblock.</param>
            <returns>Output results from <seealso cref="T:System.Management.Automation.ScriptBlock"/> invocation.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.GetInstanceEvents(System.String,System.Object)">
            <summary>
            Get attached events for a specific name and event source instance.
            </summary>
            <param name="eventName">Name of event.</param>
            <param name="eventSource">Source instance of event.</param>
            <returns>Collection of objects which represent attached events.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.GetStaticEvents(System.String,System.Type)">
            <summary>
            Get attached static events of a specific name and source type.
            </summary>
            <param name="eventName">Name of event.</param>
            <param name="sourceType">Object type of event source.</param>
            <returns>Collection of objects which represent attached events.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.GetEvents(System.String,System.Type)">
            <summary>
            Get all events of a specific name and source type.
            </summary>
            <param name="eventName">Name of event.</param>
            <param name="sourceType">Object type of event source.</param>
            <returns>Collection of objects which represent attached events.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.GetEvents(System.String)">
            <summary>
            Get all events of a specific name.
            </summary>
            <param name="eventName">Name of event.</param>
            <returns>Collection of objects which represent attached events.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.DetachInstanceEvents(System.String,System.Object)">
            <summary>
            Detach events by name and source instance.
            </summary>
            <param name="eventName">Name of event.</param>
            <param name="eventSource">Source instance of event.</param>
            <returns>Collection of instances whose events were detached.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.DetachStaticEvents(System.String,System.Type)">
            <summary>
            Detach static events by name and source type.
            </summary>
            <param name="eventName">Name of event.</param>
            <param name="sourceType">Object type of event source.</param>
            <returns>Collection of type names whose events were detached.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.DetachEvents(System.String,System.Type)">
            <summary>
            Detach events by name and source type.
            </summary>
            <param name="eventName">Name of event.</param>
            <param name="sourceType">Object type of event source.</param>
            <returns>Collection of instances and type names whose events were detached.</returns>
        </member>
        <member name="M:WpfCLR.DelegationContext.DetachEvents(System.String)">
            <summary>
            Detach events by name.
            </summary>
            <param name="eventName">Name of event.</param>
            <returns>Collection of instances and type names whose events were detached.</returns>
        </member>
        <member name="T:WpfCLR.FunctionDelegateContext`1">
            <summary>
            PowerShell script delegation for delegates that take no parameters and return a value.
            </summary>
            <typeparam name="TResult">Type of value returned by delegate.</typeparam>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`1.GetResult(System.Collections.ObjectModel.Collection{System.Management.Automation.PSObject})">
            <summary>
            Extracts result value from collection.
            </summary>
            <param name="collection">Collection from which to extract result value.</param>
            <returns>Result value extracted from collection.</returns>
        </member>
        <member name="T:WpfCLR.FunctionDelegateContext`1.FunctionDelegate">
            <summary>
            Defines delegate handler supported by <see cref="T:WpfCLR.FunctionDelegateContext`1"/>.
            </summary>
            <returns>Value returned from <see cref="M:WpfCLR.FunctionDelegateContext`1.Handler"/>.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`1.Handler">
            <summary>
            Handler method for delegate.
            </summary>
            <returns><typeparamref name="TResult"/> value returned by inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`1.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:WpfCLR.FunctionDelegateContext`1.FunctionDelegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`1.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`1"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`1.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`1"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`1.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`1"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`1.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`1"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="thisObject"></param>
        </member>
        <member name="T:WpfCLR.FunctionDelegateContext`2.FunctionDelegate">
            <summary>
            Defines delegate handler supported by <see cref="T:WpfCLR.FunctionDelegateContext`2"/>.
            </summary>
            <param name="arg">Argument to pass to <see cref="M:WpfCLR.FunctionDelegateContext`2.Handler(`0)"/>.</param>
            <returns>Value returned from <see cref="M:WpfCLR.FunctionDelegateContext`2.Handler(`0)"/>.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`2.Handler(`0)">
            <summary>
            Handler method for delegate.
            </summary>
            <param name="arg">Argument to pass to inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <returns><typeparamref name="TResult"/> value returned by inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`2.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:WpfCLR.FunctionDelegateContext`2.FunctionDelegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`2.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`2"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`2.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`2"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`2.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`2"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`2.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`2"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
        </member>
        <member name="T:WpfCLR.FunctionDelegateContext`3.FunctionDelegate">
            <summary>
            Defines delegate handler supported by <see cref="T:WpfCLR.FunctionDelegateContext`3"/>.
            </summary>
            <param name="arg1">First argument to pass to <see cref="M:WpfCLR.FunctionDelegateContext`3.Handler(`0,`1)"/>.</param>
            <param name="arg2">Second argument to pass to <see cref="M:WpfCLR.FunctionDelegateContext`3.Handler(`0,`1)"/>.</param>
            <returns>Value returned from <see cref="M:WpfCLR.FunctionDelegateContext`3.Handler(`0,`1)"/>.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`3.Handler(`0,`1)">
            <summary>
            Handler method for delegate.
            </summary>
            <param name="arg1">First argument to pass to inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <param name="arg2">Second argument to pass to inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <returns><typeparamref name="TResult"/> value returned by inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`3.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:WpfCLR.FunctionDelegateContext`3.FunctionDelegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`3.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`3"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`3.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`3"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`3.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`3"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`3.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`3"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
        </member>
        <member name="T:WpfCLR.FunctionDelegateContext`4.FunctionDelegate">
            <summary>
            Defines delegate handler supported by <see cref="T:WpfCLR.FunctionDelegateContext`4"/>.
            </summary>
            <param name="arg1">First argument to pass to <see cref="M:WpfCLR.FunctionDelegateContext`4.Handler(`0,`1,`2)"/>.</param>
            <param name="arg2">Second argument to pass to <see cref="M:WpfCLR.FunctionDelegateContext`4.Handler(`0,`1,`2)"/>.</param>
            <param name="arg3">Third argument to pass to <see cref="M:WpfCLR.FunctionDelegateContext`4.Handler(`0,`1,`2)"/>.</param>
            <returns>Value returned from <see cref="M:WpfCLR.FunctionDelegateContext`4.Handler(`0,`1,`2)"/>.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`4.Handler(`0,`1,`2)">
            <summary>
            Handler method for delegate.
            </summary>
            <param name="arg1">First argument to pass to inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <param name="arg2">Second argument to pass to inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <param name="arg3">Third argument to pass to inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</param>
            <returns><typeparamref name="TResult"/> value returned by inner <seealso cref="T:System.Management.Automation.ScriptBlock"/>.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`4.CreateHandlerDelegate">
            <summary>
            Create delegate method to handle event.
            </summary>
            <returns><seealso cref="T:WpfCLR.FunctionDelegateContext`4.FunctionDelegate"/> which will handle the event.</returns>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`4.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`4"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`4.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Threading.ApartmentState,System.Management.Automation.Runspaces.PSThreadOptions)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`4"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="apartmentState">Apartment state to use when invoking <paramref name="handler"/>.</param>
            <param name="threadOptions">Thread options to use when invoking <paramref name="handler"/>.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`4.#ctor(System.Management.Automation.ScriptBlock,System.Object,System.Management.Automation.Host.PSHost)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`4"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
            <param name="host">PowerShell host to use.</param>
        </member>
        <member name="M:WpfCLR.FunctionDelegateContext`4.#ctor(System.Management.Automation.ScriptBlock,System.Object)">
            <summary>
            Initialize new <see cref="T:WpfCLR.FunctionDelegateContext`4"/> object.
            </summary>
            <param name="handler"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle the delegate invocation.</param>
            <param name="thisObject">Object which becomes the &quot;$this&quot; variable when the <paramref name="handler"/> is invoked.</param>
        </member>
        <member name="T:WpfCLR.PSInvocation.Context">
            <summary>
            Context under which ScriptBlock will be executed.
            </summary>
        </member>
        <member name="P:WpfCLR.PSInvocation.Context.InitialLocation">
            <summary>
            Path representing initial location to be represented by the current Context.
            </summary>
            <remarks>If an invoked script changes the location, this variable will not be updated.</remarks>
        </member>
        <member name="P:WpfCLR.PSInvocation.Context.Variables">
            <summary>
            Other variables to define when invoking a script.
            </summary>
            <remarks>After a script is executed, the values in this property will not be updated. Instead, the values of these variables wil be represnted in the resulting InvocationResult object.</remarks>
        </member>
        <member name="P:WpfCLR.PSInvocation.Context.SynchronizedData">
            <summary>
            Data which is synchronized with all invocations and event handlers.
            </summary>
        </member>
        <member name="P:WpfCLR.PSInvocation.Context.This">
            <summary>
            The object which will serve as the "this" variable during script execution.
            </summary>
        </member>
        <member name="M:WpfCLR.PSInvocation.Context.#ctor">
            <summary>
            Initialize new Context object.
            </summary>
        </member>
        <member name="M:WpfCLR.PSInvocation.Context.GetResult(System.String)">
            <summary>
            Asynchronously executes a script using the current Context.
            </summary>
            <param name="script">Script to execute.</param>
            <returns>An InvocationResult object representing the results of the execution.</returns>
        </member>
        <member name="M:WpfCLR.PSInvocation.Context.GetResult(System.Management.Automation.ScriptBlock)">
            <summary>
            Asynchronously invokes a ScriptBlock using the current Context.
            </summary>
            <param name="script">ScriptBlock to execute.</param>
            <returns>An InvocationResult object representing the results of the execution.</returns>
        </member>
        <member name="T:WpfCLR.PSInvocation.EventScriptHandler`1">
            <summary>
            A specialized context for invoking a <seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle an event.
            </summary>
        </member>
        <member name="P:WpfCLR.PSInvocation.EventScriptHandler`1.HandlerScript">
            <summary>
            ScriptBlock which gets invoked when the event is raised.
            </summary>
        </member>
        <member name="P:WpfCLR.PSInvocation.EventScriptHandler`1.InitialLocation">
            <summary>
            Path representing initial location to be represented by the current Context.
            </summary>
            <remarks>If an invoked script changes the location, this variable will not be updated.</remarks>
        </member>
        <member name="P:WpfCLR.PSInvocation.EventScriptHandler`1.Variables">
            <summary>
            Other variables to define when invoking a script.
            </summary>
        </member>
        <member name="P:WpfCLR.PSInvocation.EventScriptHandler`1.SynchronizedData">
            <summary>
            Data which is synchronized with the parent context.
            </summary>
        </member>
        <member name="P:WpfCLR.PSInvocation.EventScriptHandler`1.This">
            <summary>
            The object which will serve as the "this" variable during script execution.
            </summary>
        </member>
        <member name="T:WpfCLR.ThisObj">
            <summary>
            Context object for scripts invoked while the XAML window is being displayed.
            </summary>
        </member>
        <member name="P:WpfCLR.ThisObj.NamedElements">
            <summary>
            Named elements (control) detected from XAML markup.
            </summary>
            <remarks>When the <see cref="P:WpfCLR.WpfWindow.BeforeWindowCreated"/> <see cref="T:System.Management.Automation.ScriptBlock"/> is invoked, the values will be the corresponding elements in the XAML markup.</remarks>
        </member>
        <member name="P:WpfCLR.ThisObj.MainWindow">
            <summary>
            Main WPF window being displayed.
            </summary>
            <remarks>This will be null if the window hasn't been created yet, or if there was an error while trying to create the window</remarks>
        </member>
        <member name="P:WpfCLR.ThisObj.SynchronizedData">
            <summary>
            Data which will be synchronized with the <see cref="P:WpfCLR.WpfWindow.SynchronizedData" /> property of the object responsible for creating the WPF window.
            </summary>
        </member>
        <member name="P:WpfCLR.ThisObj.Output">
            <summary>
            Collection which contains the resulting output from displaying the WPF window.
            </summary>
        </member>
        <member name="P:WpfCLR.ThisObj.ErrorRecords">
            <summary>
            Collection which contains the resulting error records generated while displaying the WPF window.
            </summary>
        </member>
        <member name="P:WpfCLR.ThisObj.WarningRecords">
            <summary>
            Collection which contains the resulting warning messages generated while displaying the WPF window.
            </summary>
        </member>
        <member name="P:WpfCLR.ThisObj.VerboseRecords">
            <summary>
            Collection which contains the resulting verbose messages generated while displaying the WPF window.
            </summary>
        </member>
        <member name="P:WpfCLR.ThisObj.DebugRecords">
            <summary>
            Collection which contains the resulting debug messages generated while displaying the WPF window.
            </summary>
        </member>
        <member name="M:WpfCLR.ThisObj.AttachButtonClick(System.Windows.Controls.Button,System.Management.Automation.ScriptBlock)">
            <summary>
            Attach a script block to a button click event.
            </summary>
            <param name="button">The button to attache the click even to.</param>
            <param name="scriptBlock">The script block that will handle the click event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="button"/> or <paramref name="scriptBlock"/> is null.</exception>
        </member>
        <member name="T:WpfCLR.GetMainWindowHandler">
            <summary>
            (internal) Handles event which creates the main WPF window.
            </summary>
            <returns>A new WPF <seealso cref="T:System.Windows.Window" />.</returns>
        </member>
        <member name="T:WpfCLR.WindowProcessInternal">
            <summary>
            Internal class which manages the creation and invocation of the WPF window.
            </summary>
        </member>
        <member name="M:WpfCLR.WindowProcessInternal.CreateMainWindow">
            <summary>
            This gets invoked by an internally-generated script at a point when the main window is to be created.
            </summary>
        </member>
        <member name="M:WpfCLR.WindowProcessInternal.ShowMainWindow(System.Boolean)">
            <summary>
            This gets invoked by an internally-generated script at a point when the main window is to be shown.
            </summary>
        </member>
        <member name="M:WpfCLR.WindowProcessInternal.Dispose">
            <summary>
            Disposes this object and the associated PowerShell instance.
            </summary>
        </member>
        <member name="T:WpfCLR.WpfWindow">
            <summary>
            Proxy object for a WPF window.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.SynchronizedData">
            <summary>
            Data which is provided to the <see cref="P:WpfCLR.WpfWindow.BeforeWindowCreated" />, <see cref="P:WpfCLR.WpfWindow.BeforeWindowShown" /> and <see cref="P:WpfCLR.WpfWindow.AfterWindowClosed" /> <seealso cref="T:System.Management.Automation.ScriptBlock" /> parameters.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.DialogResult">
            <summary>
            A value that specifies whether the activity was accepted (true) or canceled (false) after the last time the window was shown.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.WindowXaml">
            <summary>
            Text which contains the XAML markup that is used to create the WPF window.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.Output">
            <summary>
            Collection of <seealso cref="T:System.Management.Automation.PSObject" /> values which represent the output from the <see cref="P:WpfCLR.WpfWindow.BeforeWindowCreated" />, <see cref="P:WpfCLR.WpfWindow.BeforeWindowShown" /> and
            <see cref="P:WpfCLR.WpfWindow.AfterWindowClosed" /> <seealso cref="T:System.Management.Automation.ScriptBlock" /> parameters.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.ErrorRecords">
            <summary>
            Collection of <seealso cref="T:System.Management.Automation.ErrorRecord" /> objects which represent the errors encountered while showing the window as well as executing the <see cref="P:WpfCLR.WpfWindow.BeforeWindowCreated" />,
            <see cref="P:WpfCLR.WpfWindow.BeforeWindowShown" /> and <see cref="P:WpfCLR.WpfWindow.AfterWindowClosed" /> <seealso cref="T:System.Management.Automation.ScriptBlock" /> parameters.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.WarningRecords">
            <summary>
            Collection of <seealso cref="T:System.Management.Automation.WarningRecord" /> objects which represent the warning messages emitted while showing the window as well as executing the <see cref="P:WpfCLR.WpfWindow.BeforeWindowCreated" />,
            <see cref="P:WpfCLR.WpfWindow.BeforeWindowShown" /> and <see cref="P:WpfCLR.WpfWindow.AfterWindowClosed" /> <seealso cref="T:System.Management.Automation.ScriptBlock" /> parameters.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.VerboseRecords">
            <summary>
            Collection of <seealso cref="T:System.Management.Automation.VerboseRecord" /> objects which represent the verbose messages emitted while showing the window as well as executing the <see cref="P:WpfCLR.WpfWindow.BeforeWindowCreated" />,
            <see cref="P:WpfCLR.WpfWindow.BeforeWindowShown" /> and <see cref="P:WpfCLR.WpfWindow.AfterWindowClosed" /> <seealso cref="T:System.Management.Automation.ScriptBlock" /> parameters.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.DebugRecords">
            <summary>
            Collection of <seealso cref="T:System.Management.Automation.DebugRecord" /> objects which represent the debug messages emitted while showing the window as well as executing the <see cref="P:WpfCLR.WpfWindow.BeforeWindowCreated" />,
            <see cref="P:WpfCLR.WpfWindow.BeforeWindowShown" /> and <see cref="P:WpfCLR.WpfWindow.AfterWindowClosed" /> <seealso cref="T:System.Management.Automation.ScriptBlock" /> parameters.
            </summary>
        </member>
        <member name="P:WpfCLR.WpfWindow.BeforeWindowCreated">
            <summary>
            Script which gets executed before the XAML window is created.
            </summary>
            <remarks>
            When this script is invoked, the &quot;$this&quot; variable will be an instance of the <see cref="T:WpfCLR.ThisObj" /> object.
            </remarks>
        </member>
        <member name="P:WpfCLR.WpfWindow.BeforeWindowShown">
            <summary>
            Script which gets executed after the XAML window is created, but before it is shown.
            </summary>
            <remarks>
            When this script is invoked, the &quot;$this&quot; variable will be an instance of the <see cref="T:WpfCLR.ThisObj" /> object.
            If <code>$this.Window</code> is null, then that means there was an error while trying to create the window.
            </remarks>
        </member>
        <member name="P:WpfCLR.WpfWindow.AfterWindowClosed">
            <summary>
            Script which gets executed after the XAML window has been displayed and has been closed.
            </summary>
            <remarks>
            When this script is invoked, the &quot;$this&quot; variable will be an instance of the <see cref="T:WpfCLR.ThisObj" /> object.
            If <code>$this.Window</code> is null, then that means there was an error while trying to create the window, also indicating that no window was actually displayed.
            </remarks>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddOutput(System.Management.Automation.PSDataStreams)">
            <summary>
            Add output from a <seealso cref="T:System.Management.Automation.PSDataStreams" /> object to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords" />, <see cref="P:WpfCLR.WpfWindow.WarningRecords" />, <see cref="P:WpfCLR.WpfWindow.VerboseRecords" /> and
            <see cref="P:WpfCLR.WpfWindow.DebugRecords" /> collections.
            </summary>
            <param name="dataStreams">Data streams object to be added.</param>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddOutput(System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject})">
            <summary>
            Add async output to the <see cref="P:WpfCLR.WpfWindow.Output" /> collections.
            </summary>
            <param name="asyncOutput">Output object to be added.</param>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddOutput(System.Collections.Generic.IEnumerable{System.Management.Automation.PSObject})">
            <summary>
            Add output to the <see cref="P:WpfCLR.WpfWindow.Output" /> collections.
            </summary>
            <param name="output">Output object to be added.</param>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.String,System.Exception,System.String,System.Management.Automation.ErrorCategory,System.String,System.String,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception. This cannot be null, empty or entirely whitespace.</param>
            <param name="recommendedAction">Recommended action that should be taken as a result of this error.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="activity">Description of the activity that caused the error.</param>
            <param name="reason">Description of the reason for the error.</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/>, <paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="message"/> or <paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.String,System.Exception,System.String,System.Management.Automation.ErrorCategory,System.String,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception. This cannot be null, empty or entirely whitespace.</param>
            <param name="recommendedAction">Recommended action that should be taken as a result of this error.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="activity">Description of the activity that caused the error.</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/>, <paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="message"/> or <paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.Exception,System.String,System.Management.Automation.ErrorCategory,System.String,System.String,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="activity">Description of the activity that caused the error.</param>
            <param name="reason">Description of the reason for the error.</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.Exception,System.String,System.Management.Automation.ErrorCategory,System.String,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="activity">Description of the activity that caused the error.</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.String,System.Exception,System.String,System.Management.Automation.ErrorCategory,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception. This cannot be null, empty or entirely whitespace.</param>
            <param name="recommendedAction">Recommended action that should be taken as a result of this error.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/>, <paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="message"/> or <paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.String,System.Exception,System.String,System.Management.Automation.ErrorCategory)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception. This cannot be null, empty or entirely whitespace.</param>
            <param name="recommendedAction">Recommended action that should be taken as a result of this error.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/>, <paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="message"/> or <paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.String,System.Exception,System.String)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception. This cannot be null, empty or entirely whitespace.</param>
            <param name="recommendedAction">Recommended action that should be taken as a result of this error.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/>, <paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="message"/> or <paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.Exception,System.String,System.Management.Automation.ErrorCategory,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.Exception,System.String,System.Management.Automation.ErrorCategory)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.String,System.Exception,System.String)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="message">The replacement error message for the exception.</param>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.Exception,System.String,System.Management.Automation.ErrorCategory,System.String,System.String,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="activity">Description of the activity that caused the error.</param>
            <param name="reason">Description of the reason for the error.</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.Exception,System.String,System.Management.Automation.ErrorCategory,System.String,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="activity">Description of the activity that caused the error.</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.Exception,System.String,System.Management.Automation.ErrorCategory,System.Object)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <param name="targetObject">The object that was being operated on when the error occurred.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.Exception,System.String,System.Management.Automation.ErrorCategory)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <param name="errorCategory">An <seealso cref="T:System.Management.Automation.ErrorCategory"/> constant that defines the category of the error (for display purposes).</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AddError(System.Exception,System.String)">
            <summary>
            Adds an error record to the <see cref="P:WpfCLR.WpfWindow.ErrorRecords"/> collection.
            </summary>
            <param name="exception">The exception that is associated with this record. This cannot be null.</param>
            <param name="errorId">A developer-defined identifier of the error. This identifier must be a non-localized string for a specific error type and
            cannot be null, empty or entirely whitespace.</param>
            <returns><seealso cref="T:System.Management.Automation.ErrorRecord"/> object that was added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> or <paramref name="errorId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorId"/> is empty.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.AssertValidXaml(System.String,System.Xml.XmlDocument@)">
            <summary>
            Asserts that a string value contains valid XML markup that represents a WPF window.
            </summary>
            <param name="value">The XML to be parsed.</param>
            <param name="xmlDocument">The parsed XML document object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty or contains no markup.</exception>
            <exception cref="T:System.Xml.XmlException"><paramref name="value"/> does not contain valid XML.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The root element of <paramref name="value"/> is not a WPF window.</exception>
        </member>
        <member name="M:WpfCLR.WpfWindow.TryValidateXaml(System.String,System.Exception@,System.Xml.XmlDocument@)">
            <summary>
            Attempts to validate that a string value contains valid XML markup which represents a WPF window.
            </summary>
            <param name="value">The XML to be parsed.</param>
            <param name="exception">Exception that was thrown while trying to validate the document.</param>
            <param name="xmlDocument">The parsed XML document object or null if an exception occurred.</param>
            <returns>True if the XML is valid; otherwise false. This invokes <seealso cref="!:AssertValidXaml(string,XmlDocument)" /> to validate the XML.</returns>
        </member>
        <member name="M:WpfCLR.WpfWindow.TryValidateXaml(System.String,System.String@)">
            <summary>
            Attempts to validate that a string value contains valid XML markup which represents a WPF window.
            </summary>
            <param name="value">The XML to be parsed.</param>
            <param name="message">Message which represents the result of validation.</param>
            <returns>True if the XML is valid; otherwise false.</returns>
        </member>
        <member name="M:WpfCLR.WpfWindow.ShowDialog(System.Management.Automation.Host.PSHost)">
            <summary>
            Displays WPF window as a dialog (modal).
            </summary>
            <param name="host">The PowerShell host to be used.</param>
            <returns>A value that specifies whether the activity was accepted (true) or canceled (false). The return value is the value of the DialogResult property before the window closes.</returns>
        </member>
        <member name="M:WpfCLR.WpfWindow.Show(System.Management.Automation.Host.PSHost)">
            <summary>
            Displays WPF window, permitting child windows to be created.
            </summary>
            <param name="host">The PowerShell host to be used.</param>
            <returns>A value that specifies whether the activity was accepted (true) or canceled (false). The return value is the value of the DialogResult property before the window closes.</returns>
        </member>
        <member name="F:WpfCLR.XamlUtility.XmlNamespaceURI_Presentation">
            <summary>
            Namespace for WPF markup.
            </summary>
        </member>
        <member name="F:WpfCLR.XamlUtility.XmlNamespaceURI_Xaml">
            <summary>
            Namespace for XAML markup.
            </summary>
        </member>
        <member name="F:WpfCLR.XamlUtility.XmlNamespaceURI_Xml">
            <summary>
            Namespace for XML markup.
            </summary>
        </member>
        <member name="F:WpfCLR.XamlUtility.Xaml_EmptyWindow">
            <summary>
            XAML markup for an empty WPF window.
            </summary>
        </member>
        <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
            <summary>
            A read-only dictionary intended to be forward-compatible with later .NET versions.
            </summary>
            <typeparam name="TKey">Type of key used by the wrapped dictionary.</typeparam>
            <typeparam name="TValue">Type of value associated with the keys in the wrapped dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.InnerDictionary">
            <summary>
            Gets the dictionary that is wrapped by this <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> object.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> class that is a wrapper around the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element that has the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a key collection that contains the keys of the dictionary.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection that contains the values in the dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Retrieves the value that is associated with the specified key.
            </summary>
            <param name="key">The key whose value will be retrieved.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an array, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.
            </summary>
        </member>
        <member name="T:CredentialStorageLibrary.Command.RelayCommand`1">
            <summary>
            Command which is used to relay interacive events.
            </summary>
            <typeparam name="TArg">Type of argument to be passed to the command invocation handler.</typeparam>
        </member>
        <member name="E:CredentialStorageLibrary.Command.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when command object's state changes in a way that affect whether the command should be able to execute.
            </summary>
        </member>
        <member name="E:CredentialStorageLibrary.Command.RelayCommand`1.PropertyChanged">
            <summary>
            Occurs when the value of a property has changed.
            </summary>
        </member>
        <member name="P:CredentialStorageLibrary.Command.RelayCommand`1.AllowConcurrentInvocations">
            <summary>
            Determines whether multiple invocations of this command should be allowed to occur at the same time.
            </summary>
        </member>
        <member name="P:CredentialStorageLibrary.Command.RelayCommand`1.IsEnabled">
            <summary>
            Controls whether the command may be invoked.
            </summary>
        </member>
        <member name="P:CredentialStorageLibrary.Command.RelayCommand`1.ConcurrencyLevel">
            <summary>
            Gets the number of conncurent invocations of this command.
            </summary>
        </member>
        <member name="P:CredentialStorageLibrary.Command.RelayCommand`1.IsBeingInvoked">
            <summary>
            Determines whether the command is currently being invoked.
            </summary>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.#ctor(CredentialStorageLibrary.Command.RelayInvocationHandler{`0})">
            <summary>
            Create new relay command.
            </summary>
            <param name="invocationhandler">Command invocation handler.</param>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.#ctor(CredentialStorageLibrary.Command.RelayInvocationHandler{`0},System.Boolean)">
            <summary>
            Create new relay command
            </summary>
            <param name="invocationhandler">Command invocation handler.</param>
            <param name="allowConcurrentInvocations">Whether multiple concurrent invocations should be allowed.</param>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.#ctor(CredentialStorageLibrary.Command.RelayInvocationHandler{`0},System.Boolean,System.Boolean)">
            <summary>
            Create new relay command.
            </summary>
            <param name="invocationhandler">Command invocation handler.</param>
            <param name="allowConcurrentInvocations">Whether multiple concurrent invocations should be allowed.</param>
            <param name="isDisabled">Whether command is to be intially disabled.</param>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.OnCanExecuteChanged">
            <summary>
            This gets called when the command object's state changes in a way that affect whether the command should be able to execute.
            </summary>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.RaisePropertyChanged(System.String)">
            <summary>
            This gets called when a property value has changed.
            </summary>
            <param name="propertyName">Name of the property that was changed.</param>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This gets called when the value of a property has changed.
            </summary>
            <param name="args">Arguments to be passed to the PropertyChanged event.</param>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.OnCanExecute(`0)">
            <summary>
            This gets called when it needs to be determined whether the command can execute in its current state.
            </summary>
            <param name="parameter">Parameter which will be passed to the relay command.</param>
            <returns>true if this command can be executed; otherwise false.</returns>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            This is the method that gets called in order to determine whether the command can execute in its current state.
            </summary>
            <param name="parameter">Parameter which will be passed to the relay command.</param>
            <returns>true if this command can be executed; otherwise false.</returns>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.OnExecute(`0)">
            <summary>
            Occurs when the command is being executed.
            </summary>
            <param name="parameter">Parameter which was passed by the interactive command.</param>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand`1.Execute(System.Object)">
            <summary>
            This is the method that gets called when the command is to be invoked.
            </summary>
            <param name="parameter">Parameter being passed by the interactive command.</param>
        </member>
        <member name="T:CredentialStorageLibrary.Command.RelayInvocationHandler`1">
            <summary>
            Handles relay command invocation events.
            </summary>
            <param name="arg">Argument being passed with the command.</param>
            <typeparam name="TArg">Type of argument to be passed with the command.</typeparam>
        </member>
        <member name="T:CredentialStorageLibrary.Command.RelayCommand">
            <summary>
            Command which is used to relay interacive events.
            </summary>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand.#ctor(CredentialStorageLibrary.Command.RelayInvocationHandler{System.Object})">
            <summary>
            Create new relay command.
            </summary>
            <param name="invocationhandler">Command invocation handler.</param>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand.#ctor(CredentialStorageLibrary.Command.RelayInvocationHandler{System.Object},System.Boolean)">
            <summary>
            Create new relay command.
            </summary>
            <param name="invocationhandler">Command invocation handler.</param>
            <param name="allowConcurrentInvocations">Whether multiple concurrent invocations should be allowed.</param>
        </member>
        <member name="M:CredentialStorageLibrary.Command.RelayCommand.#ctor(CredentialStorageLibrary.Command.RelayInvocationHandler{System.Object},System.Boolean,System.Boolean)">
            <summary>
            Create new relay command
            </summary>
            <param name="invocationhandler">Command invocation handler.</param>
            <param name="allowConcurrentInvocations">Whether multiple concurrent invocations should be allowed.</param>
            <param name="isDisabled">Whether command is to be intially disabled.</param>
        </member>
    </members>
</doc>
