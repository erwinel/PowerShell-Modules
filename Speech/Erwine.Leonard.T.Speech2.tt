<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Management.Automation" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Management.Automation" #>
<#@ import namespace="System.Management.Automation.Runspaces" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".psd1" #>
<#@ include file="../PsModuleManifestGeneration.ttinc" #>
#
# Module manifest for module 'Erwine.Leonard.T.Speech'
#
# Generated on: <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
#
@{
<# EmitPsManifestRootModule(GenerationEnvironment); #>

<# EmitPsManifestVersion(GenerationEnvironment); #>

<# EmitPsManifestGUID(GenerationEnvironment); #>

<# EmitPsManifestAuthor(GenerationEnvironment); #>

# Company or vendor of this module
CompanyName = '<#= (String.IsNullOrEmpty(ProjectInfo.Company)) ? "Unknown" : ProjectInfo.Company#>'

# Copyright statement for this module
Copyright = '<#= (String.IsNullOrEmpty(ProjectInfo.Copyright)) ? String.Format("(c) {0:yyyy} Leonard T. Erwine. All rights reserved.", DateTime.Now) : ProjectInfo.Copyright#>'

# Description of the functionality provided by this module
<#
if (String.IsNullOrEmpty(ProjectInfo.Description))
{
#>
# Description = ''
<#
}
else
{
#>
Description = '<#=ProjectInfo.Description#>'
<#
}
#>

# Minimum version of the Windows PowerShell engine required by this module
# PowerShellVersion = ''

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module
FunctionsToExport = '*'

# Cmdlets to export from this module
CmdletsToExport = '*'

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module
AliasesToExport = '*'

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess
# PrivateData = ''

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}

# TemplateItem.Properties:
<#
	foreach (EnvDTE.Property p in TemplateItem.Properties)
	{
		object v;
		try { v = p.Value; }
		catch (Exception e)
		{
			#>#    <#=p.Name#> threw <#=e.GetType().FullName#> (<#=e.Message#>)
<#
			continue;
		}
		if (v == null)
		{
			#>#    <#=p.Name#> is null
<#
		}
		else if (v is string)
		{
			#>#    <#=p.Name#> = "<#=p.Value as string#>"
<#
		}
		else
		{
			#>#    <#=p.Name#> = [<#=p.Value.GetType().FullName#>] (<#=p.Value.ToString()#>)
<#
		}
	}
#>
#
# CurrentProject.Properties:
<#
	foreach (EnvDTE.Property p in CurrentProject.Properties)
	{
		object v;
		try { v = p.Value; }
		catch (Exception e)
		{
			#>#    <#=p.Name#> threw <#=e.GetType().FullName#> (<#=e.Message#>)
<#
			continue;
		}
		if (v == null)
		{
			#>#    <#=p.Name#> is null
<#
		}
		else if (v is string)
		{
			#>#    <#=p.Name#> = "<#=p.Value as string#>"
<#
		}
		else
		{
			#>#    <#=p.Name#> = [<#=p.Value.GetType().FullName#>] (<#=p.Value.ToString()#>)
<#
		}
	}
#>