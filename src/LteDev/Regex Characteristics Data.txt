Anchor	Attempt anchor	Anchors	\G	Matches at the start of the match attempt.
Anchor	String anchor	Anchors	^ (caret)	Matches at the start of the string the regex pattern is applied to.
Anchor	String anchor	Anchors	$ (dollar)	Matches at the end of the string the regex pattern is applied to.
Anchor	String anchor	Anchors	\A	Matches at the start of the string the regex pattern is applied to.
Anchor	String anchor	Anchors	\z	Matches at the end of the string the regex pattern is applied to.
Anchor	String anchor	Anchors	\Z	Matches at the end of the string the regex pattern is applied to.
NamedCapturingGroup	Balancing group	Balancing Groups, Recursion, and Subroutines	(?<capture-subtract>regex) where “capture” and “subtract” are group names and “regex” is any regex	The name “subtract” must be used as the name of a capturing group elsewhere in the regex. If this group has captured matches that haven’t been subtracted yet, then the balancing group subtracts one capture from “subtract”, attempts to match “regex”, and stores its match into the group “capture”. If “capture” is omitted, the same happens without storing the match. If “regex” is omitted, the balancing group succeeds without advancing through the string. If the group “subtract” has no matches to subtract, then the balancing group fails to match, regardless of whether “regex” is specified or not.
NamedCapturingGroup	Balancing group	Balancing Groups, Recursion, and Subroutines	(?'capture-subtract'regex) where “capture” and “subtract” are group names and “regex” is any regex	The name “subtract” must be used as the name of a capturing group elsewhere in the regex. If this group has captured matches that haven’t been subtracted yet, then the balancing group subtracts one capture from “subtract”, attempts to match “regex”, and stores its match into the group “capture”. If “capture” is omitted, the same happens without storing the match. If “regex” is omitted, the balancing group succeeds without advancing through the string. If the group “subtract” has no matches to subtract, then the balancing group fails to match, regardless of whether “regex” is specified or not.
NamedSubroutineCall	Named subroutine call	Balancing Groups, Recursion, and Subroutines	\g<name> where “name” is the name of a capturing group	Recursion of a capturing group or subroutine call to a capturing group.
NamedSubroutineCall	Named subroutine call	Balancing Groups, Recursion, and Subroutines	\g'name' where “name” is the name of a capturing group	Recursion of a capturing group or subroutine call to a capturing group.
Recursion	Recursion	Balancing Groups, Recursion, and Subroutines	\g<0>	Recursion of the entire regular expression.
Recursion	Recursion	Balancing Groups, Recursion, and Subroutines	\g'0'	Recursion of the entire regular expression.
Recursion	Recursion does not isolate or revert capturing groups	Balancing Groups, Recursion, and Subroutines	Recursion or subroutine call using Ruby-style \g syntax	Capturing groups are not given any special treatment by recursion and subroutine calls, except perhaps that subroutine calls capture. Backreferences always see the text most recently matched by each capturing group, regardless of whether they are inside the same level of recursion or not.
Recursion	Recursion does not isolate or revert capturing groups	Balancing Groups, Recursion, and Subroutines	Recursion or subroutine call using syntax other than \g	Capturing groups are not given any special treatment by recursion and subroutine calls, except perhaps that subroutine calls capture. Backreferences always see the text most recently matched by each capturing group, regardless of whether they are inside the same level of recursion or not.
Recursion	Recursion is atomic	Balancing Groups, Recursion, and Subroutines	Subroutine call using syntax other than (?P>…)	Subroutine calls are atomic. Once the regex engine exits from them, it will not backtrack into it to try different permutations of the subroutine call.
SubroutineCall	Forward subroutine call	Balancing Groups, Recursion, and Subroutines	\g<+1> where +1 is a positive integer	Recursion of or subroutine call to a capturing group that can be found by counting as many opening parentheses of named or numbered capturing groups as specified by the number from left to right starting at the subroutine call.
SubroutineCall	Forward subroutine call	Balancing Groups, Recursion, and Subroutines	\g'+1' where +1 is a positive integer	Recursion of or subroutine call to a capturing group that can be found by counting as many opening parentheses of named or numbered capturing groups as specified by the number from left to right starting at the subroutine call.
SubroutineCall	Relative subroutine call	Balancing Groups, Recursion, and Subroutines	\g<-1> where -1 is a negative integer	Recursion of or subroutine call to a capturing group that can be found by counting as many opening parentheses of named or numbered capturing groups as specified by the number from right to left starting at the subroutine call.
SubroutineCall	Relative subroutine call	Balancing Groups, Recursion, and Subroutines	\g'-1' where -1 is a negative integer	Recursion of or subroutine call to a capturing group that can be found by counting as many opening parentheses of named or numbered capturing groups as specified by the number from right to left starting at the subroutine call.
SubroutineCall	Subroutine call	Balancing Groups, Recursion, and Subroutines	(?1) where 1 is the number of a capturing group	Recursion of a capturing group or subroutine call to a capturing group.
SubroutineCall	Subroutine call	Balancing Groups, Recursion, and Subroutines	\g<1> where 1 is the number of a capturing group	Recursion of a capturing group or subroutine call to a capturing group.
SubroutineCall	Subroutine call	Balancing Groups, Recursion, and Subroutines	\g'1' where 1 is the number of a capturing group	Recursion of a capturing group or subroutine call to a capturing group.
SubroutineCall	Subroutine calls capture	Balancing Groups, Recursion, and Subroutines	Subroutine call using Ruby-style \g syntax	A subroutine call to a capturing group makes that capturing group store the text matched during the subroutine call.
Alternation	Alternation	Basic Features	| (pipe)	Causes the regex engine to match either the part on the left side, or the part on the right side. Can be strung together into a series of alternatives.
AnyCharacter	Dot	Basic Features	. (dot)	Matches any single character except line break characters. Most regex flavors have an option to make the dot match line break characters too.
Backreference	Backreference	Capturing Groups and Backreferences	\1 through \9	Substituted with the text matched between the 1st through 9th numbered capturing group.
Backreference	Backreference	Capturing Groups and Backreferences	\10 through \99	Substituted with the text matched between the 10th through 99th numbered capturing group.
Backreference	Backreference	Capturing Groups and Backreferences	\k<1> through \k<99>	Substituted with the text matched between the 1st through 99th numbered capturing group.
Backreference	Backreference	Capturing Groups and Backreferences	\k'1' through \k'99'	Substituted with the text matched between the 1st through 99th numbered capturing group.
Backreference	Relative Backreference	Capturing Groups and Backreferences	\k<-1>, \k<-2>, etc.	Substituted with the text matched by the capturing group that can be found by counting as many opening parentheses of named or numbered capturing groups as specified by the number from right to left starting at the backreference.
Backreference	Relative Backreference	Capturing Groups and Backreferences	\k'-1', \k'-2', etc.	Substituted with the text matched by the capturing group that can be found by counting as many opening parentheses of named or numbered capturing groups as specified by the number from right to left starting at the backreference.
CapturingGroup	Capturing group	Capturing Groups and Backreferences	(regex)	Parentheses group the regex between them. They capture the text matched by the regex inside them into a numbered group that can be reused with a numbered backreference. They allow you to apply regex operators to the entire grouped regex.
NonCapturingGroup	Non-capturing group	Capturing Groups and Backreferences	(?:regex)	Non-capturing parentheses group the regex so you can apply regex operators, but do not capture anything.
CharacterClass	Character class	Character Classes	[	When used outside a character class, [ begins a character class. Inside a character class, different rules apply. Unless otherwise noted, the syntax on this page is only valid inside character classes, while the syntax on all other reference pages is not valid inside character classes.
CharacterClass	Nested character class	Character Classes	[	An opening square bracket inside a character class begins a nested character class.
CharacterClassIntersection	Character class intersection	Character Classes	[base&&[intersect]]	Reduces the character class to the characters present in both “base” and “intersect”.
CharacterClassIntersection	Character class intersection	Character Classes	[base&&intersect]	Reduces the character class to the characters present in both “base” and “intersect”.
CharacterClassSubtraction	Character class subtraction	Character Classes	[base-[subtract]]	Removes all characters in the “subtract” class from the “base” class.
CharacterEscape	Character escape	Character Classes	\n, \r and \t	Add an LF character, a CR character, or a tab character to the character class, respectively.
CharacterEscape	Character escape	Character Classes	\a	Add the “alert” or “bell” control character (ASCII 0x07) to the character class.
CharacterEscape	Character escape	Character Classes	\b	Add the “backspace” control character (ASCII 0x08) to the character class.
CharacterEscape	Character escape	Character Classes	\e	Add the “escape” control character (ASCII 0x1B) to the character class.
CharacterEscape	Character escape	Character Classes	\f	Add the “form feed” control character (ASCII 0x0C) to the character class.
CharacterEscape	Character escape	Character Classes	\v	Add the “vertical tab” control character (ASCII 0x0B) to the character class, without adding any other vertical whitespace.
LiteralCharacter	Literal character	Character Classes	Any character except ^-]\	All characters except the listed special characters are literal characters that add themselves to the character class.
LiteralCharacter	Literal opening bracket	Character Classes	[	An opening square bracket is a literal character that adds an opening square bracket to the character class.
MetaCharacterEscape	Backslash escapes a metacharacter	Character Classes	\ (backslash) followed by any of ^-]\	A backslash escapes special characters to suppress their special meaning.
PosixClass	POSIX character equivalence	Character Classes	[=x=]	Matches a POSIX character equivalence. Can only be used in a bracket expression.
PosixClass	POSIX class	Character Classes	[:alpha:]	Matches one character from a POSIX character class. Can only be used in a bracket expression.
PosixClass	POSIX class	Character Classes	[:^alpha:]	Matches one character that is not part of a specific POSIX character class. Can only be used in a bracket expression.
PosixClass	POSIX class	Character Classes	Any supported \p{…} syntax	\p{…} syntax can be used inside character classes.
PosixClass	POSIX class	Character Classes	\p{Alpha}	Matches one character from a POSIX character class.
PosixClass	POSIX class	Character Classes	\p{IsAlpha}	Matches one character from a POSIX character class.
PosixClass	POSIX collation sequence	Character Classes	[.span-ll.]	Matches a POSIX collation sequence. Can only be used in a bracket expression.
Range	Range	Character Classes	- (hyphen) between two tokens that each specify a single character.	Adds a range of characters to the character class.
ModeModifier	Case insensitive	Mode Modifiers	(?i)	Turn on case insensitivity.
ModeModifier	Explicit capture	Mode Modifiers	(?n)	Plain parentheses are non-capturing groups instead of numbered capturing groups. Only named capturing groups actually capture.
ModeModifier	Free-spacing	Mode Modifiers	(?x)	Turn on free-spacing mode to ignore whitespace between regex tokens and allow # comments.
ModeModifier	Mode modifier	Mode Modifiers	(?letters) at the start of the regex	A mode modifier at the start of the regex affects the whole regex and overrides any options set outside the regex.
ModeModifier	Mode modifier	Mode Modifiers	(?letters) in the middle of the regex	A mode modifier in the middle of the regex affects the whole regex and overrides any options set outside the regex.
ModeModifier	Mode modifier	Mode Modifiers	(?letters) in the middle of the regex	A mode modifier in the middle of the regex affects only the part of the regex to the right of the modifier. If the modifier is used inside a group, it only affects the part of the regex inside that group to the right of the modifier. If the regex or group uses alternation, all alternatives to the right of the modifier are affected.
ModeModifier	Multi-line	Mode Modifiers	(?m)	Make ^ and $ match at the start and end of each line.
ModeModifier	Negative modifier	Mode Modifiers	(?on-off) and (?on-off:regex)	Modifier letters (if any) before the hyphen are turned on, while modifier letters after the hyphen are turned off.
ModeModifier	Single-line	Mode Modifiers	(?s)	Make the dot match all characters including line break characters.
ModeModifier	Single-line	Mode Modifiers	(?m)	Make the dot match all characters including line break characters.
ModeModifierGroup	Modifier group	Mode Modifiers	(?letters:regex)	Non-capturing group with modifiers that affect only the part of the regex inside the group.
NamedBackreference	Named backreference	Named Groups and Backreferences	\k<name>	Substituted with the text matched by the named group “name”.
NamedBackreference	Named backreference	Named Groups and Backreferences	\k'name'	Substituted with the text matched by the named group “name”.
NamedBackreference	Named backreference	Named Groups and Backreferences	(?P=name)	Substituted with the text matched by the named group “name”.
NamedCapturingGroup	Named capturing group	Named Groups and Backreferences	(?<name>regex)	Captures the text matched by “regex” into the group “name”. The name can contain letters and numbers but must start with a letter.
NamedCapturingGroup	Named capturing group	Named Groups and Backreferences	(?'name'regex)	Captures the text matched by “regex” into the group “name”. The name can contain letters and numbers but must start with a letter.
NamedCapturingGroup	Named capturing group	Named Groups and Backreferences	(?P<name>regex)	Captures the text matched by “regex” into the group “name”. The name can contain letters and numbers but must start with a letter.
FixedQuantifier	Fixed quantifier	Quantifiers	{n} where n is an integer >= 1	Repeats the previous item exactly n times.
GreedyOptionalQuantifier	Greedy quantifier	Quantifiers	? (question mark)	Makes the preceding item optional. Greedy, so the optional item is included in the match if possible.
GreedyOptionalRepeatQuantifier	Greedy quantifier	Quantifiers	* (star)	Repeats the previous item zero or more times. Greedy, so as many items as possible will be matched before trying permutations with less matches of the preceding item, up to the point where the preceding item is not matched at all.
GreedyMultipleQuantifier	Greedy quantifier	Quantifiers	+ (plus)	Repeats the previous item once or more. Greedy, so as many items as possible will be matched before trying permutations with less matches of the preceding item, up to the point where the preceding item is matched only once.
GreedyLimitedQuantifier	Greedy quantifier	Quantifiers	{n,m} where n >= 0 and m >= n	Repeats the previous item between n and m times. Greedy, so repeating m times is tried before reducing the repetition to n times.
GreedyMinRepeatQuantifier	Greedy quantifier	Quantifiers	{n,} where n >= 0	Repeats the previous item at least n times. Greedy, so as many items as possible will be matched before trying permutations with less matches of the preceding item, up to the point where the preceding item is matched only n times.
GreedyMaxRepeatQuantifier	Greedy quantifier	Quantifiers	{,m} where m >= 1	Repeats the previous item between zero and m times. Greedy, so repeating m times is tried before reducing the repetition to zero times.
LazyOptionalQuantifier	Lazy quantifier	Quantifiers	??	Makes the preceding item optional. Lazy, so the optional item is excluded in the match if possible.
LazyOptionalRepeatQuantifier	Lazy quantifier	Quantifiers	*?	Repeats the previous item zero or more times. Lazy, so the engine first attempts to skip the previous item, before trying permutations with ever increasing matches of the preceding item.
LazyMultipleQuantifier	Lazy quantifier	Quantifiers	+?	Repeats the previous item once or more. Lazy, so the engine first matches the previous item only once, before trying permutations with ever increasing matches of the preceding item.
LazyLimitedQuantifier	Lazy quantifier	Quantifiers	{n,m}? where n >= 0 and m >= n	Repeats the previous item between n and m times. Lazy, so repeating n times is tried before increasing the repetition to m times.
LazyMinRepeatQuantifier	Lazy quantifier	Quantifiers	{n,}? where n >= 0	Repeats the previous item n or more times. Lazy, so the engine first matches the previous item n times, before trying permutations with ever increasing matches of the preceding item.
LazyMaxRepeatQuantifier	Lazy quantifier	Quantifiers	{,m}? where m >= 1	Repeats the previous item between zero and m times. Lazy, so repeating zero times is tried before increasing the repetition to m times.
PossessiveOptionalQuantifier	Possessive quantifier	Quantifiers	?+	Makes the preceding item optional. Possessive, so if the optional item can be matched, then the quantifier won’t give up its match even if the remainder of the regex fails.
PossessiveOptionalRepeatQuantifier	Possessive quantifier	Quantifiers	*+	Repeats the previous item zero or more times. Possessive, so as many items as possible will be matched, without trying any permutations with less matches even if the remainder of the regex fails.
PossessiveMultipleQuantifier	Possessive quantifier	Quantifiers	++	Repeats the previous item once or more. Possessive, so as many items as possible will be matched, without trying any permutations with less matches even if the remainder of the regex fails.
PossessiveLimitedQuantifier	Possessive quantifier	Quantifiers	{n,m}+ where n >= 0 and m >= n	Repeats the previous item between n and m times. Possessive, so as many items as possible up to m will be matched, without trying any permutations with less matches even if the remainder of the regex fails.
PossessiveMinRepeatQuantifier	Possessive quantifier	Quantifiers	{n,}+ where n >= 0	Repeats the previous item n or more times. Possessive, so as many items as possible will be matched, without trying any permutations with less matches even if the remainder of the regex fails.
Shorthand	Shorthand	Shorthand Character Classes	\d	Adds all digits to the character class. Matches a single digit if used outside character classes.
Shorthand	Shorthand	Shorthand Character Classes	\w	Adds all word characters to the character class. Matches a single word character if used outside character classes.
Shorthand	Shorthand	Shorthand Character Classes	\s	Adds all whitespace to the character class. Matches a single whitespace character if used outside character classes.
Shorthand	Shorthand	Shorthand Character Classes	\v	Adds all vertical whitespace to the character class. Matches a single vertical whitespace character if used outside character classes.
Shorthand	Shorthand	Shorthand Character Classes	\h	Adds all horizontal whitespace to the character class. Matches a single horizontal whitespace character if used outside character classes.
Shorthand	Shorthand	Shorthand Character Classes	\h	Adds all hexadecimal digits to the character class. Matches a hexadecimal digit if used outside character classes.
CharacterEscape	Character escape	Special and Non-Printable Characters	\n, \r and \t	Match an LF character, CR character and a tab character respectively
CharacterEscape	Character escape	Special and Non-Printable Characters	\a	Match the “alert” or “bell” control character (ASCII 0x07)
CharacterEscape	Character escape	Special and Non-Printable Characters	\e	Match the “escape” control character (ASCII 0x1B)
CharacterEscape	Character escape	Special and Non-Printable Characters	\f	Match the “form feed” control character (ASCII 0x0C)
CharacterEscape	Character escape	Special and Non-Printable Characters	\v	Match the “vertical tab” control character (ASCII 0x0B), but not any other vertical whitespace.
ControlCharacterEscape	Control character escape	Special and Non-Printable Characters	\cA through \cZ	Match an ASCII character Control+A through Control+Z, equivalent to \x01 through \x1A
EscapeSequence	Escape sequence	Special and Non-Printable Characters	\Q...\E	Matches the characters between \Q and \E literally, suppressing the meaning of special characters
HexidecimalEscape	Hexadecimal escape	Special and Non-Printable Characters	\xFF where FF are 2 hexadecimal digits	Matches the character at the specified position in the code page
LineBreak	Line break	Special and Non-Printable Characters	\R	Matches any line break, including CRLF as a pair, CR only, LF only, form feed, vertical tab, and any Unicode line break
LiteralCharacter	Literal character	Special and Non-Printable Characters	Any character except [\^$.|?*+()	All characters except the listed special characters match a single instance of themselves
LiteralCharacter	Literal curly braces	Special and Non-Printable Characters	{ and }	{ and } are literal characters, unless they’re part of a valid regular expression token such as a quantifier {3}
MetaCharacterEscape	Backslash escapes a metacharacter	Special and Non-Printable Characters	\ followed by any of [\^$.|?*+(){}	A backslash escapes special characters to suppress their special meaning
NullEscape	NULL escape	Special and Non-Printable Characters	\0	Match the NULL character
OctalEscape	Octal escape	Special and Non-Printable Characters	\1 through \7	Matches the character at the specified position in the ASCII table
OctalEscape	Octal escape	Special and Non-Printable Characters	\10 through \77	Matches the character at the specified position in the ASCII table
OctalEscape	Octal escape	Special and Non-Printable Characters	\100 through \177	Matches the character at the specified position in the ASCII table
OctalEscape	Octal escape	Special and Non-Printable Characters	\200 through \377	Matches the character at the specified position in the active code page
OctalEscape	Octal escape	Special and Non-Printable Characters	\400 through \777	Matches the character at the specified position in the active code page
OctalEscape	Octal escape	Special and Non-Printable Characters	\01 through \07	Matches the character at the specified position in the ASCII table
OctalEscape	Octal escape	Special and Non-Printable Characters	\010 through \077	Matches the character at the specified position in the ASCII table
OctalEscape	Octal escape	Special and Non-Printable Characters	\0100 through \0177	Matches the character at the specified position in the ASCII table
OctalEscape	Octal escape	Special and Non-Printable Characters	\0200 through \0377	Matches the character at the specified position in the active code page
AtomicGrtoup	Atomic group	Special Groups	(?>regex)	Atomic groups prevent the regex engine from backtracking back into the group after a match has been found for the group. If the remainder of the regex fails, the engine may backtrack over the group if a quantifier or alternation makes it optional. But it will not backtrack into the group to try other permutations of the group.
Comment	Comment	Special Groups	(?#comment)	Everything between (?# and ) is ignored by the regex engine.
Conditional	Conditional	Special Groups	(?(1)then|else) where 1 is the number of a capturing group and then and else are any valid regexes	If the referenced capturing group took part in the match attempt thus far, the “then” part must match for the overall regex to match. If the capturing group did not take part in the match thus far, the “else” part must match for the overall regex to match.
Conditional	Conditional	Special Groups	(?(+1)then|else) where 1 is the number of a capturing group and then and else are any valid regexes	The + is ignored and the number is taken as an absolute reference to a capturing group. If the referenced capturing group took part in the match attempt thus far, the “then” part must match for the overall regex to match. If the capturing group did not take part in the match thus far, the “else” part must match for the overall regex to match.
Conditional	Implicit lookahead conditional	Special Groups	(?(regex)then|else) where regex, then, and else are any valid regexes and regex is not the name of a capturing group	If “regex” is not the name of a capturing group, then it is interpreted as a lookahead as if you had written (?(?=regex)then|else). If the lookahead succeeds, the “then” part must match for the overall regex to match. If the lookahead fails, the “else” part must match for the overall regex to match. The lookaround is zero-length. The “then” and “else” parts consume their matches like normal regexes.
Conditional	Lookaround conditional	Special Groups	(?(?=regex)then|else) where (?=regex) is any valid lookaround and then and else are any valid regexes	If the lookaround succeeds, the “then” part must match for the overall regex to match. If the lookaround fails, the “else” part must match for the overall regex to match. The lookaround is zero-length. The “then” and “else” parts consume their matches like normal regexes.
Conditional	Named conditional	Special Groups	(?(name)then|else) where name is the name of a capturing group and then and else are any valid regexes	If the capturing group with the given name took part in the match attempt thus far, the “then” part must match for the overall regex to match. If the capturing group did not take part in the match thus far, the “else” part must match for the overall regex to match.
Conditional	Named conditional	Special Groups	(?(<name>)then|else) where name is the name of a capturing group and then and else are any valid regexes	If the capturing group with the given name took part in the match attempt thus far, the “then” part must match for the overall regex to match. If the capturing group did not take part in the match thus far, the “else” part must match for the overall regex to match.
Conditional	Named conditional	Special Groups	(?('name')then|else) where name is the name of a capturing group and then and else are any valid regexes	If the capturing group with the given name took part in the match attempt thus far, the “then” part must match for the overall regex to match. If the capturing group did not take part in the match thus far, the “else” part must match for the overall regex to match.
Lookbehind	Lookbehind	Special Groups	(group)(?<=\1)	Backreferences can be used inside lookbehind. Syntax prohibited in lookbehind is also prohibited in the referenced capturing group.
NegativeLookahead	Negative lookahead	Special Groups	(?!regex)	Similar to positive lookahead, except that negative lookahead only succeeds if the regex inside the lookahead fails to match.
NegativeLookbehind	Negative lookbehind	Special Groups	(?<!regex)	Matches at a position if the pattern inside the lookbehind cannot be matched ending at that position.
NoTextInMatch	Keep text out of the regex match	Special Groups	\K	The text matched by the part of the regex to the left of the \K is omitted from the overall regex match. Other than that the regex is matched normally from left to right. Capturing groups to the left of the \K capture as usual.
PositiveLookahead	Positive lookahead	Special Groups	(?=regex)	Matches at a position where the pattern inside the lookahead can be matched. Matches only the position. It does not consume any characters or expand the match. In a pattern like one(?=two)three, both two and three have to match at the position where the match of one ends.
PositiveLookbehind	Lookbehind	Special Groups	(?<=regex|longer regex)	Alternatives inside lookbehind can differ in length.
PositiveLookbehind	Lookbehind	Special Groups	(?<=x{n,m})	Quantifiers with a finite maximum number of repetitions can be used inside lookbehind.
PositiveLookbehind	Lookbehind	Special Groups	(?<=regex)	The full regular expression syntax can be used inside lookbehind.
PositiveLookbehind	Positive lookbehind	Special Groups	(?<=regex)	Matches at a position if the pattern inside the lookbehind can be matched ending at that position.
CodePoint	Code point	Unicode Syntax Reference	\uFFFF where FFFF are 4 hexadecimal digits	Matches a specific Unicode code point.
CodePoint	Code point	Unicode Syntax Reference	\u{FFFF} where FFFF are 1 to 4 hexadecimal digits	Matches a specific Unicode code point.
CodePoint	Code point	Unicode Syntax Reference	\x{FFFF} where FFFF are 1 to 4 hexadecimal digits	Matches a specific Unicode code point.
CodePoint	Grapheme	Unicode Syntax Reference	\X	Matches a single Unicode grapheme, whether encoded as a single code point or multiple code points using combining marks. A grapheme most closely resembles the everyday concept of a “character”.
UnicodeCategory	Negated Unicode property	Unicode Syntax Reference	\P{Property}	Matches a single Unicode code point that does not have the specified property (category, script, or block).
UnicodeCategory	Negated Unicode property	Unicode Syntax Reference	\p{^Property}	Matches a single Unicode code point that does not have the specified property (category, script, or block).
UnicodeCategory	Unicode block	Unicode Syntax Reference	\p{InBlock}	Matches a single Unicode code point that is part of the specified Unicode block. Each Unicode code point is part of exactly one block. Blocks may contain unassigned code points.
UnicodeCategory	Unicode block	Unicode Syntax Reference	\p{IsBlock}	Matches a single Unicode code point that is part of the specified Unicode block. Each Unicode code point is part of exactly one block. Blocks may contain unassigned code points.
UnicodeCategory	Unicode category	Unicode Syntax Reference	\pL where L is a Unicode category	Matches a single Unicode code point in the specified Unicode category.
UnicodeCategory	Unicode category	Unicode Syntax Reference	\PL where L is a Unicode category	Matches a single Unicode code point that is not in the specified Unicode category.
UnicodeCategory	Unicode category	Unicode Syntax Reference	\p{L} where L is a Unicode category	Matches a single Unicode code point in the specified Unicode category.
UnicodeCategory	Unicode category	Unicode Syntax Reference	\p{IsL} where L is a Unicode category	Matches a single Unicode code point in the specified Unicode category.
UnicodeCategory	Unicode category	Unicode Syntax Reference	\p{Category}	Matches a single Unicode code point in the specified Unicode category.
UnicodeCategory	Unicode property	Unicode Syntax Reference	\P{^Property}	Matches a single Unicode code point that does have the specified property (category, script, or block). Double negative is taken as positive.
UnicodeCategory	Unicode script	Unicode Syntax Reference	\p{Script}	Matches a single Unicode code point that is part of the specified Unicode script. Each Unicode code point is part of exactly one script. Scripts never contain unassigned code points.
UnicodeCategory	Unicode script	Unicode Syntax Reference	\p{IsScript}	Matches a single Unicode code point that is part of the specified Unicode script. Each Unicode code point is part of exactly one script. Scripts never contain unassigned code points.
WordBoundary	Word boundary	Word Boundaries	\b	Matches at a position that is followed by a word character but not preceded by a word character, or that is preceded by a word character but not followed by a word character.
WordBoundary	Word boundary	Word Boundaries	\B	Matches at a position that is preceded and followed by a word character, or that is not preceded and not followed by a word character.
