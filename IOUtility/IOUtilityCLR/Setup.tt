<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".ps1" #>
<#@ include file="PSModuleDetail.ttinc" #>
<#
GenerationEnvironment.Clear();
foreach (FileInfo fileInfo in DteInfo.GetCodeProjectFiles())
	WriteLine(String.Format("Code: {0}", fileInfo.FullName));
foreach (FileInfo fileInfo in DteInfo.GetNonCodeProjectFiles())
	WriteLine(String.Format("Item: {0}", fileInfo.FullName));
string[] fileNames = DteInfo.GetCodeProjectFiles().Select(fi => fi.Name).ToArray();
WriteLine(String.Format("$ModuleBaseName = '{0}';", ModuleBaseName));
WriteLine("Add-Type -Path (");
PushIndent("    ");
WriteLine(String.Format("('{0}') | ForEach-Object {{", String.Join("', '", fileNames)));
PushIndent("    ");
WriteLine("ForEach-Object { $PSScriptRoot | Join-Path -ChildPath $_ }");
PopIndent();
WriteLine(") -ReferencedAssemblies 'System.Windows.Forms', 'System.Drawing', 'System.Data', 'System.Management.Automation', 'System.Xml';");
PopIndent();
//GetTypeDetail(Host.GetType());
#>
$ModuleBaseName = '<#=ModuleBaseName#>';
Add-Type -Path (('ModuleManifest.cs', 'NotificationForm.cs', 'NotificationForm.Designer.cs', 'SetupForm.cs', 'SetupForm.Designer.cs') | ForEach-Object { $PSScriptRoot | Join-Path -ChildPath $_ }) `
	-ReferencedAssemblies 'System.Windows.Forms', 'System.Drawing', 'System.Data', 'System.Management.Automation', 'System.Xml';

('System.Windows.Forms', 'System.Drawing', 'System.Data') | ForEach-Object {
	if ((Add-Type -AssemblyName $_ -PassThru -ErrorAction Stop) -eq $null) { throw ('Cannot load assembly "{0}".' -f $_) }
}

Function Invoke-InstallModule {
	[CmdletBinding()]
	Param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]$Path
	)
	
	Process {

	}
}

Function Invoke-UninstallModule {
	[CmdletBinding()]
	Param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]$Path
	)
	
	Process {

	}
}

Function Invoke-UpdateModule {
	[CmdletBinding()]
	Param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]$Path
	)
	
	Process {

	}
}

$Script:ModuleManifest = New-Object -TypeName 'PSModuleInstallUtilModuleManifest' -ArgumentList ($PSScriptRoot | Join-Path -ChildPath '<#=ModuleBaseName#>.psd1');
do {
	$SetupForm = New-Object -TypeName 'PSModuleInstallUtil.SetupForm' -ArgumentList $Script:ModuleManifest;
	try {
		$DialogResult = $SetupForm.ShowDialog();
		$Paths = $SetupForm.DestinationLocations;
	} catch {
		throw;
	}
	finally {
		$SetupForm.Dispose();
	}
	switch ($DialogResult) {
		{ $_ -eq [System.Windows.Forms.DialogResult]::OK } {
			$Paths | Invoke-InstallModule;
			break;
		}
		{ $_ -eq [System.Windows.Forms.DialogResult]::Yes } {
			break;
		}
		{ $_ -eq [System.Windows.Forms.DialogResult]::No } {
			$Paths | Invoke-UninstallModule;
			break;
		}
		{ $_ -eq [System.Windows.Forms.DialogResult]::Retry} {
			$Paths | Invoke-UpdateModule;
			break;
		}
	}
} while ($DialogResult -ne [System.Windows.Forms.DialogResult]::Cancel);