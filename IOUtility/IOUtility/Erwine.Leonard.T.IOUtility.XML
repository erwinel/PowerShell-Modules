<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Erwine.Leonard.T.IOUtility</name>
    </assembly>
    <members>
        <member name="T:IOUtilityCLR.EncodeRegexReplaceHandler">
            <summary>
            Encodes text according to a specific pattern.
            </summary>
        </member>
        <member name="M:IOUtilityCLR.EncodeRegexReplaceHandler.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.EncodeRegexReplaceHandler" />.
            </summary>
            <param name="pattern">Regular Expression pattern of text to encode.</param>
            <param name="options">Regular expression pattern options.</param>
        </member>
        <member name="M:IOUtilityCLR.EncodeRegexReplaceHandler.#ctor(System.String)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.EncodeRegexReplaceHandler" />.
            </summary>
            <param name="pattern">Regular Expression pattern of text to encode.</param>
        </member>
        <member name="M:IOUtilityCLR.EncodeRegexReplaceHandler.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.EncodeRegexReplaceHandler" />.
            </summary>
            <param name="regex">Regular Expression object which matches text to encode.</param>
        </member>
        <member name="M:IOUtilityCLR.EncodeRegexReplaceHandler.Evaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Returns encoded text.
            </summary>
            <param name="match">Current regular expression match to be replaced.</param>
            <returns>Text with matches encoded.</returns>
        </member>
        <member name="T:IOUtilityCLR.PSEventScriptHandler`1">
            <summary>
            A specialized context for invoking a <seealso cref="T:System.Management.Automation.ScriptBlock"/> which will handle an event.
            </summary>
        </member>
        <member name="E:IOUtilityCLR.PSEventScriptHandler`1.EventHandlerInvoked">
            <summary>
            This gets raised after <see cref="M:IOUtilityCLR.PSEventScriptHandler`1.EventHandler(System.Object,`0)"/> is invoked and <see cref="P:IOUtilityCLR.PSEventScriptHandler`1.HandlerScript"/> handles the event.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.HandlerScript">
            <summary>
            <seealso cref="T:System.Management.Automation.ScriptBlock"/> which gets invoked when <see cref="M:IOUtilityCLR.PSEventScriptHandler`1.EventHandler(System.Object,`0)"/> is invoked.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.Name">
            <summary>
            Arbitrary name to associate with events handled by this object.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.Host">
            <summary>
            PowerShell host to use when invoking <see cref="P:IOUtilityCLR.PSEventScriptHandler`1.HandlerScript"/>.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.InitialLocation">
            <summary>
            Path representing initial location to be represented by the current Context.
            </summary>
            <remarks>If an invoked script changes the location, this variable will not be updated.</remarks>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.UseLocalScope">
            <summary>
            Whether or not to use the local scope when invoking <see cref="P:IOUtilityCLR.PSEventScriptHandler`1.HandlerScript"/>.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.ApartmentState">
            <summary>
            Specifies the apartment state to use when invoking <see cref="P:IOUtilityCLR.PSEventScriptHandler`1.HandlerScript"/>.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.ThreadOptions">
            <summary>
            PowerShell threading options for invoking <see cref="P:IOUtilityCLR.PSEventScriptHandler`1.HandlerScript"/>.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.Configuration">
            <summary>
            Runspace configuration to use when invoking <see cref="P:IOUtilityCLR.PSEventScriptHandler`1.HandlerScript"/>.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.Variables">
            <summary>
            Other variables to define when invoking a script.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.SynchronizedData">
            <summary>
            Data which is synchronized with the parent context.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSEventScriptHandler`1.This">
            <summary>
            The object which will serve as the &quot;$this&quot; variable during script execution.
            </summary>
        </member>
        <member name="M:IOUtilityCLR.PSEventScriptHandler`1.#ctor(System.String,System.Management.Automation.ScriptBlock,IOUtilityCLR.PSInvocationContext)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.PSEventScriptHandler`1"/> object for handling <seealso cref="T:System.EventHandler`1"/> events.
            </summary>
            <param name="name">Arbitrary name to associate with events handled by this object.</param>
            <param name="handlerScript"><seealso cref="T:System.Management.Automation.ScriptBlock"/> which handles <seealso cref="T:System.EventHandler`1"/> events.</param>
            <param name="parentContext">Parent <seealso cref="T:IOUtilityCLR.PSInvocationContext"/> object.</param>
        </member>
        <member name="M:IOUtilityCLR.PSEventScriptHandler`1.EventHandler(System.Object,`0)">
            <summary>
            Method which is intended for handling source <seealso cref="T:System.EventHandler`1"/> events.
            </summary>
            <param name="sender">Object which raised the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:IOUtilityCLR.PSEventScriptHandler`1.RaiseEventHandlerInvoked(System.Object,`0,IOUtilityCLR.PSInvocationResult)">
            <summary>
            Raises the <see cref="E:IOUtilityCLR.PSEventScriptHandler`1.EventHandlerInvoked"/> event.
            </summary>
            <param name="sender">Object which is the source of the original event.</param>
            <param name="args">Information about the original event.</param>
            <param name="invocationResult">Results of handling the event.</param>
        </member>
        <member name="M:IOUtilityCLR.PSEventScriptHandler`1.OnEventHandlerInvoked(IOUtilityCLR.PSInvocationEventHandlerInvokedArgs{`0})">
            <summary>
            This gets invoked after <see cref="P:IOUtilityCLR.PSEventScriptHandler`1.HandlerScript"/> has handled the event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:IOUtilityCLR.PSInvocationContext">
            <summary>
            Context under which ScriptBlock will be executed.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationContext.InitialLocation">
            <summary>
            Path representing initial location to be represented by the current Context.
            </summary>
            <remarks>If an invoked script changes the location, this variable will not be updated.</remarks>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationContext.Variables">
            <summary>
            Other variables to define when invoking a script.
            </summary>
            <remarks>After a script is executed, the values in this property will not be updated. Instead, the values of these variables wil be represnted in the resulting InvocationResult object.</remarks>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationContext.SynchronizedData">
            <summary>
            Data which is synchronized with all invocations and event handlers.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationContext.This">
            <summary>
            The object which will serve as the "this" variable during script execution.
            </summary>
        </member>
        <member name="M:IOUtilityCLR.PSInvocationContext.#ctor">
            <summary>
            Initialize new Context object.
            </summary>
        </member>
        <member name="M:IOUtilityCLR.PSInvocationContext.GetResult(System.String)">
            <summary>
            Asynchronously executes a script using the current Context.
            </summary>
            <param name="script">Script to execute.</param>
            <returns>An InvocationResult object representing the results of the execution.</returns>
        </member>
        <member name="M:IOUtilityCLR.PSInvocationContext.GetResult(System.Management.Automation.ScriptBlock)">
            <summary>
            Asynchronously invokes a ScriptBlock using the current Context.
            </summary>
            <param name="script">ScriptBlock to execute.</param>
            <returns>An InvocationResult object representing the results of the execution.</returns>
        </member>
        <member name="T:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs">
            <summary>
            Base abstract event information class for accessing base <seealso cref="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.EventArgs"/> object.
            </summary>
        </member>
        <member name="M:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.#ctor(System.Object,System.EventArgs,IOUtilityCLR.PSInvocationResult)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs"/> object.
            </summary>
            <param name="sender">Object which was the source of the event.</param>
            <param name="eventArgs">Information about the event.</param>
            <param name="invocationResult">Result from the event handler.</param>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.Sender">
            <summary>
            Object which raised the original event.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.EventArgs">
            <summary>
            Information about the source event which was handled by the event handler script.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.HadErrors">
            <summary>
            True if errors were encountered while handling the event.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.RanToCompletion">
            <summary>
            True if event handling script ran to completion.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.Output">
            <summary>
            Output returned from event handler script.
            </summary>}
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.Variables">
            <summary>
            Values of variables after event handler script completion.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.Errors">
            <summary>
            Errors which occurred during event handler script execution.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.Warnings">
            <summary>
            Warnings which occurred during event handler script execution.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.Verbose">
            <summary>
            Verbose messages generated during event handler script execution.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs.Debug">
            <summary>
            Debug messages generated during event handler script execution.
            </summary>
        </member>
        <member name="T:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs`1">
            <summary>
            Contains information about the result of a script-handled event.
            </summary>
            <typeparam name="TEventArgs">Type of arguments passed from the source event, to the event handler script.</typeparam>
        </member>
        <member name="M:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs`1.#ctor(System.Object,`0,IOUtilityCLR.PSInvocationResult)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs`1"/> object.
            </summary>
            <param name="sender">Object which was the source of the event.</param>
            <param name="eventArgs">Information about the event.</param>
            <param name="invocationResult">Result from the event handler.</param>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventHandlerInvokedArgs`1.EventArgs">
            <summary>
            Information about the source event which was handled by the event handler script.
            </summary>
        </member>
        <member name="T:IOUtilityCLR.PSInvocationEventResult">
            <summary>
            Result information about a handled event.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventResult.Name">
            <summary>
            Arbitrary name associated with <seealso cref="T:IOUtilityCLR.PSEventScriptHandler`1"/> which handled the event.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.PSInvocationEventResult.Args">
            <summary>
            Result of handling the event.
            </summary>
        </member>
        <member name="M:IOUtilityCLR.PSInvocationEventResult.#ctor(System.String,IOUtilityCLR.PSInvocationEventHandlerInvokedArgs)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.PSInvocationEventResult"/> object.
            </summary>
            <param name="name">Arbitrary name associated with <seealso cref="T:IOUtilityCLR.PSEventScriptHandler`1"/> which handled the event.</param>
            <param name="args">Result of handling the event.</param>
        </member>
        <member name="T:IOUtilityCLR.RegexReplaceHandler">
            <summary>
            Base class for replacing text based upon regular expression matches.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.RegexReplaceHandler.Regex">
            <summary>
            Regular Expression object which matches text to encode.
            </summary>
        </member>
        <member name="M:IOUtilityCLR.RegexReplaceHandler.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.RegexReplaceHandler" />.
            </summary>
            <param name="pattern">Regular Expression pattern of text to encode.</param>
            <param name="options">Regular expression pattern options.</param>
        </member>
        <member name="M:IOUtilityCLR.RegexReplaceHandler.#ctor(System.String)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.RegexReplaceHandler" />.
            </summary>
            <param name="pattern">Regular Expression pattern of text to encode.</param>
        </member>
        <member name="M:IOUtilityCLR.RegexReplaceHandler.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.RegexReplaceHandler" />.
            </summary>
            <param name="regex">Regular Expression object which matches text to encode.</param>
        </member>
        <member name="M:IOUtilityCLR.RegexReplaceHandler.Evaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Returns replaced text.
            </summary>
            <param name="match">Current regular expression match to be replaced.</param>
            <returns>Text which has been replaced according to match results.</returns>
        </member>
        <member name="M:IOUtilityCLR.RegexReplaceHandler.Replace(System.String)">
            <summary>
            Replaces text.
            </summary>
            <param name="input">Text to be searched and replaced.</param>
            <returns>Text which has been replaced according to match results.</returns>
        </member>
        <member name="M:IOUtilityCLR.RegexReplaceHandler.Replace(System.String,System.Int32)">
            <summary>
            Replaces text.
            </summary>
            <param name="input">Text to be searched and replaced.</param>
            <param name="count">Maximum number of matches to be replaced.</param>
            <returns>Text which has been replaced according to match results.</returns>
        </member>
        <member name="M:IOUtilityCLR.RegexReplaceHandler.Replace(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces text.
            </summary>
            <param name="input">Text to be searched and replaced.</param>
            <param name="count">Maximum number of matches to be replaced.</param>
            <param name="startat">Index at which replacement starts.</param>
            <returns>Text which has been replaced according to match results.</returns>
        </member>
        <member name="T:IOUtilityCLR.ScriptRegexReplaceHandler">
            <summary>
            Uses a <see cref="P:IOUtilityCLR.ScriptRegexReplaceHandler.ScriptBlock" /> to replace matching text.
            </summary>
        </member>
        <member name="P:IOUtilityCLR.ScriptRegexReplaceHandler.ScriptBlock">
            <summary>
            <see cref="P:IOUtilityCLR.ScriptRegexReplaceHandler.ScriptBlock" /> which gets invoked when a match occurs.
            </summary>
        </member>
        <member name="M:IOUtilityCLR.ScriptRegexReplaceHandler.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Management.Automation.ScriptBlock)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.ScriptRegexReplaceHandler" />.
            </summary>
            <param name="pattern">Regular Expression pattern of text to encode.</param>
            <param name="options">Regular expression pattern options.</param>
            <param name="scriptBlock"><see cref="P:IOUtilityCLR.ScriptRegexReplaceHandler.ScriptBlock" /> which gets invoked when a match occurs.</param>
        </member>
        <member name="M:IOUtilityCLR.ScriptRegexReplaceHandler.#ctor(System.String,System.Management.Automation.ScriptBlock)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.ScriptRegexReplaceHandler" />.
            </summary>
            <param name="pattern">Regular Expression pattern of text to encode.</param>
            <param name="scriptBlock"><see cref="P:IOUtilityCLR.ScriptRegexReplaceHandler.ScriptBlock" /> which gets invoked when a match occurs.</param>
        </member>
        <member name="M:IOUtilityCLR.ScriptRegexReplaceHandler.#ctor(System.Text.RegularExpressions.Regex,System.Management.Automation.ScriptBlock)">
            <summary>
            Initialize new <see cref="T:IOUtilityCLR.ScriptRegexReplaceHandler" />.
            </summary>
            <param name="regex">Regular Expression object which matches text to encode.</param>
            <param name="scriptBlock"><see cref="P:IOUtilityCLR.ScriptRegexReplaceHandler.ScriptBlock" /> which gets invoked when a match occurs.</param>
        </member>
        <member name="M:IOUtilityCLR.ScriptRegexReplaceHandler.Evaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Returns replaced text.
            </summary>
            <param name="match">Current regular expression match to be replaced.</param>
            <returns>Text which has been replaced by <see cref="P:IOUtilityCLR.ScriptRegexReplaceHandler.ScriptBlock" />.</returns>
        </member>
        <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
            <summary>
            A read-only dictionary intended to be forward-compatible with later .NET versions.
            </summary>
            <typeparam name="TKey">Type of key used by the wrapped dictionary.</typeparam>
            <typeparam name="TValue">Type of value associated with the keys in the wrapped dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.InnerDictionary">
            <summary>
            Gets the dictionary that is wrapped by this <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> object.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> class that is a wrapper around the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element that has the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a key collection that contains the keys of the dictionary.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection that contains the values in the dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Retrieves the value that is associated with the specified key.
            </summary>
            <param name="key">The key whose value will be retrieved.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an array, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.
            </summary>
        </member>
    </members>
</doc>
